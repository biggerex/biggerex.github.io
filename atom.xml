<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://biggerex.github.io</id>
    <title>biggerex</title>
    <updated>2022-07-25T09:33:54.476Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://biggerex.github.io"/>
    <link rel="self" href="https://biggerex.github.io/atom.xml"/>
    <subtitle>币格</subtitle>
    <logo>https://biggerex.github.io/images/avatar.png</logo>
    <icon>https://biggerex.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, biggerex</rights>
    <entry>
        <title type="html"><![CDATA[领域驱动设计学习笔记-基础]]></title>
        <id>https://biggerex.github.io/post/ling-yu-qu-dong-she-ji-xue-xi-bi-ji-ji-chu/</id>
        <link href="https://biggerex.github.io/post/ling-yu-qu-dong-she-ji-xue-xi-bi-ji-ji-chu/">
        </link>
        <updated>2022-07-25T09:07:57.000Z</updated>
        <content type="html"><![CDATA[<p>软件架构 / 作者： thinkclaves<br>
一、核心思想与解决的痛点问题<br>
1.1 模型和建模<br>
模型是领域的抽象和模拟</p>
<p>建模是针对特定问题建立领域的合理模型</p>
<p>1.2软件系统复杂性<br>
业务复杂导致模型复杂</p>
<p>技术实现引入额外复杂性</p>
<p>ddd核心思想一：模型分解<br>
<img src="https://cdn.jsdelivr.net/gh/biggerex/bigcdn@main/blog/static/img/image.png" alt="" loading="lazy"><br>
ddd核心思想二：模型驱动设计<br>
模型驱动设计（Model Driven Design）：通过分层架构隔离领域层、仔细选择模型和设计方案等措施保持实现与模型的一致。<br>
<img src="https://cdn.jsdelivr.net/gh/biggerex/bigcdn@main/blog/static/img/image-1.png" alt="" loading="lazy"></p>
<p>领域驱动设计通过分解模型和模型驱动设计控制复杂性。</p>
<p>二、面向对象与敏捷与ddd区别于联系<br>
2.1 ddd与面向对象<br>
<img src="https://cdn.jsdelivr.net/gh/biggerex/bigcdn@main/blog/static/img/image-2.png" alt="" loading="lazy"><br>
区别：OOAD没有战略设计；DDD通过战略设计划分领域和模型。OOAD仅用对象描述世界；DDD的描述更细致。</p>
<p>联系：OOAD和DDD都是建模和设计思想，部分建模方法和工具可复用。</p>
<p>2.2ddd与敏捷<br>
敏捷是增量式开发模式。<br>
<img src="https://cdn.jsdelivr.net/gh/biggerex/bigcdn@main/blog/static/img/image-3.png" alt="" loading="lazy"></p>
<p>敏捷：关注流程和文化；DDD：关注建模设计方法。敏捷：重人员轻文档；DDD：重视统一语言建立</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[“元宇宙”究竟是什么呢？]]></title>
        <id>https://biggerex.github.io/post/yuan-yu-zhou-jiu-jing-shi-shi-me-ni/</id>
        <link href="https://biggerex.github.io/post/yuan-yu-zhou-jiu-jing-shi-shi-me-ni/">
        </link>
        <updated>2021-12-06T02:14:30.000Z</updated>
        <content type="html"><![CDATA[<p>近期，Facebook 把自己公司更名为 Meta（元），上了一波热搜；而前段时间国内的阿里腾讯，国外的谷歌等巨头纷纷宣布入局元宇宙；行业“冥”灯罗永浩也宣布要入局元宇宙，这个词汇出现的越来越频繁，而未来会更频繁。</p>
<p>那么“元宇宙”究竟是什么呢？<br>
1000 个人眼里有 1000 个“元宇宙”</p>
<p>什么是“元宇宙”，1000 个人眼里有 1000 个“元宇宙”。</p>
<p>不同的媒体、公司、个人等，对“元宇宙”都有着自己的理解：<br>
有的人认为“元宇宙”代表着人类文明的未来；而还有些人觉得“元宇宙”代表着虚拟世界的“躺平”，是个“邪恶”的东西，Elon Musk 的冲向太空，才是人类文明的未来.....</p>
<p>而在这两种观点之间，还有一种观点：“元宇宙”和互联网一样，本身是不带任何属性的，重点还是看我们如何使用它。</p>
<p>要探讨什么是“元宇宙”，我们需要探索人类需求的本源。<br>
影视文学中的元宇宙</p>
<p>首先，我们从影视文学中的元宇宙的角度来挖掘一下：</p>
<p>《雪崩》<br>
对于元宇宙的解释，目前公认翻译自 1992 年斯蒂芬森科幻小说《雪崩》中“Metaverse”（也译为超元域）一词。元宇宙简单来说，就是现实世界中的所有人和事都被数字化投射在了这个网络云端世界里，你可以在这个世界里做任何你在真实世界中可以做的事情。与此同时，你还可能做你在真实世界里做不到的事情。</p>
<p>《庄周梦蝶》<br>
而在中国 2300 多年前的百家争鸣时代，庄子梦到了自己变成了蝴蝶在翩翩飞舞，醒来之后不知身在何处，就产生了这样的思考：到底是庄子变成了蝴蝶，还是蝴蝶变成了庄子呢？哪个才是真是的存在？还有《枕中记》一书中的“黄粱一梦”等成语也是类似的哲思探索。</p>
<p>《星球大战》<br>
在《星球大战》中我们看到具备三维全息投影功能的 R2D2 机器人；以及目前在游戏玩家中很流行的玩意儿：由一个全视角显示头盔和一套感应服构成，感应服可以使玩家从肉体上感觉到游戏中的击打、刀刺和火烧，能产生出酷热和严寒，甚至还能逼真地模拟出身体暴露在风雪中的感觉。在《三体》改编的同名游戏中提到，汪淼走到她后面，由于游戏是在头盔中以全视角方式显示的，在显示器上什么都看不到。</p>
<p>《王牌特工》<br>
在美国影视剧《王牌特工》中，当你带上王牌特工的专属 AR 眼镜，其他与会人哪怕身在不同国家地区，都能就在身边一样，开一个全息会议。</p>
<p>《阿凡达》<br>
在《阿凡达》影视剧中，科学家尝试将人类 DNA 和纳威人的 DNA 结合在一起，制造出一个克隆纳威人。而最神奇的地方在于克隆纳威人可以让人类的意识入驻其中，从而成为人类在这个星球上活动的“化身”（Avatar）。</p>
<p>《黑镜》<br>
在《黑镜》第二季第一集当中，名为“Be Right Back·马上回来”，讲述了一对情侣 Martha 和 Ash 搬去了 Ash 父母居住的远离尘嚣的小镇生活，但是社交网络狂人 Ash 却在归还搬家租赁的货车时死于非命。在 Ash 的葬礼上，Martha 的朋友 Sarah 告诉了她一种和死去的人建立联系的新方法，就是用 Ash 在社交网络中留下的所有信息、状态，更新和 Like，Martha 可以创造出一个新的“真”Ash，从而帮助她减轻伤痛。</p>
<p>《刀剑神域》<br>
在《刀剑神域》中，当你带上脑机接口设备时，你在游戏中死亡，那么在现实中也将死亡。</p>
<p>《太空堡垒》<br>
《太空堡垒》有 3 个非常了不起的设定：<br>
1、全息眼镜 Holoband 和虚拟 paradise<br>
2、意识上传到云端<br>
3、意识下载到机器人的身体中，成为第一代具备真正“智慧”的机器人</p>
<p>《头号玩家》<br>
2045 年，处于混乱和崩溃边缘的现实世界令人失望，人们将救赎的希望寄托于“绿洲”，一个由鬼才詹姆斯·哈利迪一手打造的虚拟游戏世界。人们只要戴上 VR 设备，就可以进入这个与现实世界形成强烈反差的虚拟世界。在这个世界中，有繁华的都市，形象各异、光彩照人的玩家，而不同次元的影视游戏中的经典角色也可以在这里齐聚。就算你在现实中是一个挣扎在社会边缘的失败者，在“绿洲”里也依然可以成为超级英雄，再遥远的梦想都变得触手可及。</p>
<p>《失控玩家》<br>
今年上映的一个新的影视剧。其中的主角以为自己是生活的主角，其实只不是这个世界的一个 NPC，这个舞台上的提线木偶。</p>
<p>《UPLOAD》<br>
《UPLOAD》中的精彩设定：<br>
1、死前将意识上传到虚拟天堂<br>
2、死后的世界也有 2G 和 5G 之分<br>
3、死后通过全息方式参加自己的葬礼</p>
<p>《黑客帝国》<br>
未来的人类生活在机器人所制造的矩阵（Matrix）虚拟世界中，而机器人则得以从人体获取所需的生物能源。但生活在虚拟世界中的人类丝毫没有意识到自己的世界是虚拟的，知道“救世主”的出现。</p>
<p>我们并不是来讲解这个科幻影视作品的，我们要做的，是从中这些科幻影视作品中，看看人们的需求。</p>
<p>一提到需求，我们可能会立刻想到马斯克的“需求层次论”，但是在这里，我们更加抽象一下：</p>
<p>物质需求：创造价值与财富，提高生产力<br>
精神需求：消费与享受生活，社交娱乐<br>
永生：彻底脱离生老病死，实现数字化永生</p>
<p>当然，按照目前科技的发展进程，如果想实现人类生物身体的永生不老是非常难的，但是通过 Metaverse 的技术未来我们有可能会实现一种数字化的永生。<br>
巨头眼中的元宇宙</p>
<p>介绍完影视剧中的“元宇宙”，我们来看看巨头眼中的元宇宙：<br>
Facebook？Meta！</p>
<p>首先我们来看的是 Meta，也就是之前的 Facebook。对 Meta 来说，今年是一个非常重要的一年，因为今年它改元。当然我们都知道在中国的历史上，某个帝王更改自己的年号叫“改元”，其实对 Facebook 对 Meta 来说，2021 年也是它的改元之年。我们可以看一看在它改元之前，它的虚拟现实以及在元宇宙做了哪些布局。</p>
<p>2014 年的时候，其用 20 亿美元将股份收购了 OculusVR。在收购的时候，扎克伯格在自己的 Facebook 主页上说了这样一句话：沉浸式的虚拟现实游戏，将是虚拟现实第一个重大应用，但是这仅仅只是一个起点，虚拟现实绝不仅仅是游戏，我们希望把它打造成下一个计算和通讯平台。</p>
<p>2018 年 9 月，Facebook 在 OculusConnect 开发者大会上宣布推出独立虚拟现实（VR）头盔 Oculus Quest，跟 Oculus Go 类似，这种头盔无需 PC 或手机即可提供虚拟现实功能。但是它提供了 6 自由度的游戏控制器，可以让玩家更愉快的玩耍。</p>
<p>2020 年 9 月，Facebook 在开发者大会上宣布推出 OculusQuest 2 代，定价仅 299 美元。2021 年 11 月 17 日，根据高通 CEO 透露的数据，Oculus Quest2 代的累积销量已经突破 1000 万台！！！</p>
<p>那么 1000 万台意味着什么？意味着 VR 头显的设备已经跨越了所谓的第一个极限点，即将迈向真正的星辰大海。</p>
<p>往后接下来几年还会陆续还有 Oculus 的 3 代和 4 代，而这些都在开发之中，而且价格肯定不会比二代贵，也会解决诸多的技术问题，但是具体的发布时间（可能在 2022 年圣诞节前）还在猜测当中。除了 3 代和 4 代之外，还有传闻中的 PRO 版本，也就是性能更强，价格更高，那么它可能会对标传说中要发布的苹果的新品。当然 Meta 也就是之前的 Facebook，除了现有的 Oculus 这条产品之外，还在积极的研发 AR 眼镜。</p>
<p>看完上述的这些产品之外，我们也来看一看 Meta 还有其他哪些布局：2018 年的 Facebook F8 大会上，Oculus 首席科学家 Michael Abrash 宣布 Oculus 研发部门 Oculus Research 重新命名为 Facebook Reality Labs，并同时涉足 VR 与 AR 技术的研发。<br>
Facebook AR/VR 部门在 2021 年总人数已逾 1 万人,占总员工人数的近 20%,而 2017 年该部门仅为 1000 人。<br>
Facebook 有两个开发者的大会是值得我们关注的，分别是每年 5 月到 6 月的 F8 大会，以及每年 10 月底左右的 XR 开发者大会。<br>
Facebook 于 2017 年发布了名为 AR Studio 的 AR 套件，并一直与全球社区合作，共同塑造和定义 Spark AR 平台。</p>
<p>2021 年 8 月 20 日，Facebook 推出测试性的 VR 远程办公 APP，名为 HorizonWorkrooms，有了该软件，Oculus Quest 2 用户可以用虚拟化身参与会议。</p>
<p>2021 年 11 月 11 日，Meta 宣布与微软合作，将 Meta 旗下的 WorkPlace 功能与微软的 Teams 整合，发展元宇宙办公室。</p>
<p>我们可以看到，现在虚拟现实和原有的产品和技术的布局，从之前的以数年为单位，现在已经大大的提速，增加到了一年半年甚至几个月都会有一个新的产品新的功能出来。</p>
<p>那么在内容生态上，Meta 一是推出 Oculus Store，目前已有超过 60 款 Oculus Quest 游戏的营收超过 100 万美元；二是和第三方平台 SideQuest 合作。</p>
<p>其还成立了 Oculus Studio，并且收购多家 VR 内容公司，包括 Beat Games、Downpour、Ready at Dawn、Sanzaru Games、BigBox VR。</p>
<p>根据 Steam VR 平台的统计数据，我们可以看到 OcQ 设备的市场占有率是非常的高：</p>
<p>那么目前在这个市场上我们可以看到，整个平台已经有了一定数量的相关的 VR 内容，包括支持各个设备的，但是还仅仅是在以千为单位。</p>
<p>我们都知道，比如说苹果的 App Store 或者是安卓商城上的应用，都已经是突破上百万甚至几百万个，那么现在目前 VR 的应用还处于非常的早期。</p>
<p>所以对于 Meta 来说，也就对于之前的 Facebook 来说，最重要的事情就是上个月 28 号扎克伯格宣布它正式更名成 Meta，从此迈向未来的星辰大海。<br>
微软</p>
<p>同样是元宇宙，我们可以看到 Meta，也就是 Facebook 它更偏重于其社交属性。而对于微软来说，它更多是从企业办公、企业生产力方面来看，也就是所谓的“企业元宇宙”。</p>
<p>2015 的开发者大会，微软与 WIN10 一起推出黑科技产品 HoloLens；<br>
2019 年 2 月的 MWC（世界移动通信大会）上，微软发布 HoloLens 2 代；<br>
2021 年 4 月，微软拿下美军 218.8 亿美元的军工版 HoloLens 合同。</p>
<p>除设备之外，<br>
2018 年 10 月，微软首次启动 AzureDigital Twins 平台预览版；<br>
2020 年 12 月，微软宣布 AzureDigital Twins 全面上市；<br>
2021 年 3 月，微软推出了一款具有 3D 化身和其他 XR 功能的虚拟平台 Mesh，旨在打造能让人们通过 AR/VR 技术进行远程协作的应用。微软团队将会推出全新的 3D 虚拟化身，无须使用 VR/AR 头盔，用户将能够以虚拟任务或动画卡通的形式出现在视频会议中，且通过人工智能能够解读声音，让头像变得活灵活现。</p>
<p>可以看到微软的动作也是不断的加快：11 月 2 日，微软在 Ignite 大会上宣布，计划将旗下聊天和会议应用 Microsoft Teams 打造成元宇宙，把混合现实会议平台 Microsoft Mesh 融入 Microsoft Teams 中。此外，Xbox 游戏平台将来也要加入元宇宙。</p>
<p>萨提亚·纳德拉表示，微软的元宇宙最初专注于企业级应用。</p>
<p>微软（中国）首席技术官官韦青表示，没必要去纠结现在流行的技术叫什么词，无论是叫元宇宙也好，叫数字孪生也罢。永远不要忘记，创造虚拟空间的初衷是为了强化物理世界，让我们在现实生活提高生产效率，降低生产成本。</p>
<p>官韦青指出，像微软、苹果等科技公司的业务是虚拟空间、物理世界两方面业务皆有覆盖，两方面互补，而不是单方面地陷入到某一个领域。元宇宙构筑的逻辑，都是将物理世界的对象和现象变成模型，放到虚拟空间中，进行仿真、预测，最终反馈到物理空间，来强化我们的物理世界。</p>
<p>下图是微软的 Metaverse 解决方案，包括它的物理世界、连接、建模、位置、数据，还有智能逻辑以及协作平台等等，可以看到它是偏向于提高生产力。</p>
<p>下图是微软去年在 AR/VR 领域的专利，可以看到在 Q1 至 Q3 它都是排在第一的，Q4 是 Magic Leap 跃居第一。</p>
<p>在 Meta 的眼中，元宇宙可能更多的是社交娱乐，也就是满足我们的精神需求，而在微软的眼中元宇宙做更多的是提升生产效率，满足物质层面的需求，那么，英伟达眼中的元宇宙又是什么呢？<br>
英伟达-OmniVerse</p>
<p>英伟达提出自己的元宇宙叫 OmniVerse。它在元宇宙相关的布局及相关产品：</p>
<p>1、NVIDIA RTX 系统显卡和虚拟工作站；<br>
2、NVIDIA CloudXR-XR 串流平台（和微软 Azure 以及 Amazon AWS 开展合作，主要兼容 AR 和 VR 设备，包括不限于：1、大部分 PCVR、HoloLens 2、VR 一体机、支持 AR 的安卓和 iOS 设备等）；<br>
3、OmniVerse 元宇宙平台-数字版老黄</p>
<p>2021 年 11 月 9 日 GTC 大会再次升级 Omniverse 平台，发布了 OmniverseAvatar 和 Omniverse Replicator。Omniverse Avatar 是一个用于生成交互式 AI 化身的技术平台。它集合了英伟达在语音 AI、计算机视觉、自然语言理解、推荐引擎和模拟技术方面积累的技术，为创建人工智能助手打开了大门，可以帮助处理数十亿的日常客户服务互动。Omniverse Replicator 则是一种合成数据生成引擎，可以基于现有数据持续生成用于训练的合成数据。<br>
Omniverse 的门户是 USD（通用场景描述）黄仁勋认为 Omniverse 的本质是一个数字虫洞。未来任何计算机都可以连接到 Omniverse 就像 HTML（一种标记语言，可将网络上的文档格式统一）基于网站。</p>
<p>黄仁勋表示：“如何使用 OmniVerse 模拟仓库、工厂、物理和生物系统、5G 边缘、机器人、自动驾驶汽车，甚至是虚拟形象的数字孪生，是一个永恒的主题。”<br>
总结来说，在英伟达眼中，那么不管是叫 OmniVerse，还是 MetaVerse 也好，它百分之八九十的功能是为了提升生产力。具体的细节大家可以去相关的英伟达的开发网站去看详细的细节（http:developer.nvidia.com/nvidia-omniverse-platform）。<br>
苹果</p>
<p>苹果虽然目前还没有推出相关的产品，但是他在不断的收购相关的公司以及部署了非常多的专利。那么在各个场合其 CEO 库克也表达了他对元宇宙以及对虚拟现实的一些看法。</p>
<p>I think AR is big and profound. This is oneof those huge thing that we'll look back at and marved at the stat of it. Ithink customers are going to see it in a variety of ways anfd it feeld great toget AR going at a level that can get all of the developers behind it.<br>
Tim Cook, Apple CEO</p>
<p>库克认为，AI，也就是增强现实是一个非常巨大的市场。</p>
<p>在苹果 WWDC 2017 大会上，苹果发布了 AR 开发工具 ARKit，具备 SLAM、平面检测、光照估计、环境理解、图像识别等功能；<br>
2017 年 9 月 12 日，苹果正式发布的 iPhoneX 系列手机中使用了 A11 Bionic 芯片，首次集成了神经网络引擎；以及 3D 结构光技术 FaceID，通过 iPhone X 的 Face ID 可以制作 3D 表情 Animoji；</p>
<p>2019 年 9 月 11 日，苹果发布的 iPhone11 首次使用了 UWB 超宽频芯片 U1，超宽频技术让 iPhone 11 系列更具空间感知能力，可精确定位其他配备 U1 的苹果设备；</p>
<p>2019 年 10 月 29 日，苹果发布的 AirpodsPro 无线降噪耳机首次使用了“空间音频”功能，2020 年 9 月苹果发布的 iOS 14 为 AirPods Pro 新增了“空间音频”功能；</p>
<p>2020 年 1 月 14 日，苹果推出 USDZ3D 格式转换工具 Reality Converter；2020 年 3 月 18 日，苹果官网发布了 iPad Pro 2020，首次使用了 dTOF 激光雷达（LiDAR）；<br>
2021 年 4 月 21 日，苹果春季发布会上推出的 iPad Pro 2021 搭载 M1 芯片，令世人震惊；</p>
<p>2021 年秋季发布会，苹果推出搭载 M1X 芯片的 14 寸和 16 寸 Macbook Pro；</p>
<p>根据彭博社的报告透露，苹果未来的 AR/VR 设备将集成 M 系列芯片的高端版本。<br>
那么产业链的消息是 2022 年的秋季，苹果很可能会发布自己的首款 AR/MR 头显。与此同时 2025 年的时候有可能会推出苹果首款 AI 眼镜。</p>
<p>当然前面也提到了，其实苹果虽然没有推出产品，但是它已经布局了非常多的专利，包括收购了大大小小的各种相关的公司，其实都是公开可以查询到的（https://www.fastscience.tv/collections/k1ntwsy7lJLihhL5iA89）。<br>
谷歌<br>
看完苹果之后，我们再来看一下谷歌。谷歌在这个领域的布局和定位，可能是没有那么的清晰。比如说我们都知道，Meta 的定位是做社交元宇宙；微软做的就是企业元宇宙；苹果面向于 C 端消费者市场，定位是做增强现实。</p>
<p>谷歌做了很多尝试性的工作，包括 Google DayDream 和 Google Glass 等，但是延续性都不是很强。所以对于谷歌今后将推出什么样的产品，我们无从知晓，目前来说延续性比较好的是 ARCORE 这一块。</p>
<p>当然它在相关技术的前沿研究上还是做的比较到位的，比如 Project Starline，就是一个仿真、全新的社交。“Project Starline”是一个结合了硬件和软件技术进步的技术项目，旨在帮助相隔两地的朋友、家人和同事共聚一起。想象一下，透过一扇神奇的窗户，你可以看到另一个人，真人大小，三维形式。你们可以自然地对话，做手势和进行眼神交流。<br>
华为</p>
<p>2019 年推出 VR Glass；2021 年 11 月 17 日推出 VR Glass 6dof 游戏套装版本；<br>
2019 年 11 月开源数据虚拟化引擎华为河图 Cyberverse, 目的是打造一个“地球级、不断演进，与现实无缝融合的数字新世界”。华为河图有四个核心能力：1、3D 高精地图能力；2、全场景空间计算能力；3、强环境理解功能；4、虚拟现实融合渲染能力。<br>
其他公司</p>
<p>字节跳动：2021 年 8 月 29 日字节跳动官宣 90 亿元人民币收购 Pico。</p>
<p>腾讯：提出全真互联网概念。当然他在这个领域的更多是通过投融资投资来布局，比如说投资虚幻引擎，以及做上周又投了一家做触觉手套相关技术的公司。</p>
<p>HTC：<br>
2015 年 3 月在 MWC 2015 上发布 HTC Vive，并于 2016 年上市；<br>
2017 年 HTC 将部分手机业务出售给 Google 后，全面转型 VR 市场，曾一度占领市场先机。但是近两年 C 端市场的表现远远落后于 Facebook，2021 年 6 月宣布重心转向 B 端；<br>
2021 年 5 月发布 HTC VIVEFocus3 商业版和 HTC VIVE PRO 2。</p>
<p>Sony：<br>
2016 年 10 月，Sony 正式开始发售 PSVR，并搭配 PS4 和下一代的 PS5 使用；2018 年 8 月，PSVR 销售突破了 300 万台；根据 Sony 官方透露的消息，PSVR2 预计 2022 年发布<br>
元宇宙百科词典</p>
<p>我们看完了科幻影视作品里面元宇宙，以及巨头对元宇宙之后的看法，接下来我们就看几个关键的核心的名词。</p>
<p>首先是 3 个 R：</p>
<p>VR=一切皆梦幻泡影<br>
VR(Immersive Virtual Reality)= 虚拟世界，沉浸式虚拟现实，忘了现实世界的一切~<br>
VR 满足 3 个特性，分别是沉浸、交互和想象。</p>
<p>AR=向左是真实，向右是虚幻<br>
AR(Augmented Reality)=真实世界 + 数字化信息</p>
<p>MR=真实虚幻傻傻分不清<br>
MR(Mixed Reality)=真实世界 + 虚拟世界+ 数字化信息，假作真时真亦假，无为有处有还无</p>
<p>数字人：什么是数字人，什么是虚拟偶像？通过建模、3D 扫描以及动作捕捉，把类似真实的人的形象做成一个虚拟的数字人，然后让他做很多相关的初步动作。待会我们会在技术环节给大家讲述数字人是如何实现的。</p>
<p>数字孪生（Digital Twin）：虚拟和现实的高度融合互通（现实世界的数字复刻）<br>
1.最早用于 NASA 阿波罗项目，对飞行中的空间飞行器进行实时仿真；<br>
2.实现物理工厂/系统和数字工厂/系统的交互和融合；<br>
3.面向 B 端-用于工业 4.0、智能制造、智慧城市等；<br>
4.AR/VR、IoT、AI 是重要的技术支撑。</p>
<p>下图是北京航空航天的陶飞等人从车间组成的角度给出了车间数字孪生的定义，然后提出了车间数字孪生的组成，主要包括：物理车间、虚拟车间、车间服务系统、车间孪生数据几部分。物理车间是真实存在的车间，主要从车间服务系统接收生产任务，并按照虚拟车间仿真优化后的执行策略，执行完成任务；虚拟车间是物理车间的计算机内的等价映射，主要负责对生产活动进行仿真分析和优化，并对物理车间的生产活动进行实时的监测、预测和调控；车间服务系统是车间各类软件系统的总称，主要负责车间数字孪生驱动物理车间的运行，和接受物理车间的生产反馈。</p>
<p>全真网：马化腾于 2020 年底在腾讯集团官方年度特刊《三观》提出<br>
1.移动互联网的接替者；<br>
2.虚拟世界和真实世界的全面融合；<br>
3.全面+真实（全面= 消费互联网+产业互联网   真实= AR/VR 交互技术）。</p>
<p>元宇宙：源自科幻作品《雪崩》，⼀个⼈们以虚拟形象在三维空间与各种软件进⾏交互的世界。其真正为人所知是今年 Roblox 上市的时候，把 MetaVerse 加到了招股说明书，并且提出了元宇宙的八大要素：身份、朋友、沉浸感、低延迟、多元化、随地、经济系统、文明。</p>
<p>可以看出，其对元宇宙的理解，更多也是一个社交娱乐层面的。而维基百科之中，对元宇宙的定义更加的精准和全面：The metaverse (a portmanteau of &quot;meta-&quot; and&quot;universe&quot;) is a hypothesized iteration of the internet, supportingpersistent online 3-D virtual environments through conventional personalcomputing, as well as virtual and augmented reality headsets.<br>
一句话概述：元宇宙就是下一代互联网。<br>
元宇宙的技术基础</p>
<p>那么接下来我们来一起看一看元宇宙就是如何构建的，也就是元宇宙的技术基础。<br>
元宇宙的构成技术是非常的多，包括虚拟现实、区块链、AI+人工智能等等.</p>
<p>我们本次重点从虚拟现实和大家分享一下。AR/VR 技术的科技树，也就是五大核心技术：近眼显示技术、内容创建技术、网络传输技术、渲染技术、感知和自然交互技术。</p>
<p>1.Near-eye display（近眼显示技术）包括传统的屏幕显示技术（LCOS/OLED/可折叠的 AMOLED/Micro LED）和光学技术（光场显示/波导技术等等。</p>
<p>2.Content creation（内容创作技术）包括虚拟角色和场景构建、动作捕捉、全景视频拍摄与编辑等等。</p>
<p>3.Network communication（网络传输技术）<br>
这方面最受人关注的当然就是即将商用的 5G 技术，以及传说中传输速率可达每秒 1T 的下一代 6G 技术了。当然还有一系列的其它技术有待发展。</p>
<p>4.Rendering Processing（渲染技术）包括本地渲染、云渲染、光场渲染、多重视角渲染，以及硬件渲染加速等等技术。</p>
<p>5.Perception&amp;interaction（感知和自然交互）<br>
包括跟踪定位技术、多感官自然交互技术（脑波、语音交互、触感交互等等）、机器视觉技术（SLAM/场景分离与识别等）</p>
<p>AR/VR 技术有一个非常著名的科技树（如下图），我们可以看到刚才提到的五大技术都有一个科技树展开，然后每个树也有自己的树干，每个树干上也有非常多的分支和树叶。毫不夸张的说，在其中的任何一个树干，甚至任何一个树叶之上，如果去做深入的研究，都可以在这个领域成为一个非常资深的专家。</p>
<p>下图是 AR/VR 技术成熟度曲线，可以看到类似跟踪定位、液晶屏显示、云渲染以及 OS 相关等技术基本上都是属于两年之内可以商用的。</p>
<p>类似另外一些，比如说自由曲面、虚拟化身、混合云渲染等这些可能要 2~5 年。</p>
<p>接下来我们快速的带大家来一起过一下 5 大核心技术。<br>
近眼显示技术</p>
<p>首先是近眼显示技术。近眼显示技术分两个部分，分别是显示技术以及光学技术。<br>
显示技术其实就指的各种各样的显示屏，比如 LED、MicroLED 等等。</p>
<p>而对于光学技术，我们可能首先想到就是双眼视差原理。人眼是如何实现立体视觉呢？其实最简单就是因为每个人都有两只眼睛，每个眼睛之间都有一定的间隔，通过间隔每个眼睛看到的图像有所差别，再通过我们的大脑的这种判断，最终都形成了一个立体视觉。</p>
<p>同时，AR/VR 的光学系统，包括 Pancake，折返式、自由曲面以及光波导。</p>
<p>然后我们再来看一下还有全息投影技术，3D 全息投影技术可以分为投射全息投影和反射全息投影两种，是全息摄影技术的逆向展示。</p>
<p>目前我们经常看到的各类表演中所使用的全息投影技术都需要用到全息膜这种特殊的介质，而且需要提前在舞台上做各种精密的光学布置。虽然看起来效果绚丽无比，但成本高昂，操作复杂，需要专业训练，并非每个普通人都可以轻松享受到的。从某种程度上来说，目前的主流商用全息投影技术只能被称作“伪全息投影”。<br>
内容创建技术</p>
<p>内容创建技术分成 360 全景拍摄、传统 3D 建模和 3D 重建。</p>
<p>全景拍摄，其实也就是全景相机还有全景摄像机。<br>
优点：百分百真实<br>
缺点：无法切换焦点，无法和场景及人物互动</p>
<p>3D 建模就是大家熟悉的 3D MAX、玛雅等。<br>
优点：精度高，流程成熟<br>
缺点：耗费大量人力、时间、精力</p>
<p>3D 重建主要是针对于小物体以及人物角色。它本身就分成基于 2D 图像、基于 3D 扫描、基于红外 TOF。</p>
<p>惯性动作捕捉技术也是比较主流的动作捕捉技术之一。其基本原理是通过惯性导航传感器和 IMU（惯性测量单元）来测量演员动作的加速度、方位、倾斜角等特性。惯性动作捕捉技术的特点是不受环境干扰，不怕遮挡，采样速度高，精度高。2015 年 10 月由奥飞动漫参与 B 轮投资的诺亦腾就是一家提供惯性动作捕捉技术的国内科技创业公司，其动作捕捉设备曾用在 2015 年最热门的美剧《冰与火之歌：权力的游戏》中，并帮助该剧勇夺第 67 届艾美奖的“最佳特效奖”。</p>
<p>我们以英伟达的“虚拟发布会”为例，来讲一下怎么搭建一个虚拟场景。</p>
<p>详细的步骤可以参考下图：</p>
<p>第一步：使用 3D 扫描构建虚拟场景</p>
<p>第二步：使用体积摄影进行全身 3D 建模</p>
<p>第三步：使用 AI Audio2Face 让口型和面部肌肉变化随语音变动</p>
<p>第四步：使用动作捕捉获取身体姿态动画</p>
<p>第五步：使用 RTX 渲染器进行实时光线追踪</p>
<p>在了解前述知识点之后，我们再来看看 3D 引擎和 SDK 技术。当然在这个领域 AR/VR 里面最常用的 3D 引擎无非也就是虚幻和 Unity。</p>
<p>在此，推荐一本非常经典的书叫《游戏引擎架构》。书里对游戏引擎，从低阶到图形动画，再到高阶的构成做了非常详细的描述和解释说明，目前已经是出到第三版了。</p>
<p>AR/VR 相关的 SDK 比如说 Vuforia、APPLE ARKit，GOOGLEARCORE 等等。<br>
网络传输技术</p>
<p>我们再来看一下网络传输技术。网络传输技术是虚拟现实的支撑技术。</p>
<p>渲染技术渲染技术包括本地渲染、云渲染、光场渲染、多重视角渲染，以及硬件渲染加速等等技术。<br>
本地的 VR 渲染流程如下：</p>
<p>云 VR 渲染流程：<br>
在本地 VR 渲染的基础上额外增加三个环节（比本地渲染增加 20ms 左右的延迟）：<br>
1.图像压缩编码<br>
2.网络传输<br>
3.图像解压缩</p>
<p>云 VR 渲染的利弊：<br>
好处：<br>
1.降低对本地硬件处理能力的要求<br>
包括存储空间、性能、散热等，从而让设备增加轻便</p>
<p>缺点：<br>
1.额外增加延迟，影响实际体验<br>
2.清晰度经压缩和传输后无法保证</p>
<p>端云渲染的配合使用<br>
1.对于不追求及时响应的应用<br>
如 3dof 游戏、VR 看房、旅游景点观赏、全景视频播放等，通过 ATW+云渲染+本地观看的方式可以获得比较好的效果。</p>
<p>2.对于追求及时响应的 6dof 游戏和社交互动应用<br>
渲染处理更多还是需要在本地进行，云端用于处理指令型数据（参考大型多人在线游戏 MMORPG）。</p>
<p>3.当前的 5G 网络和设备硬件性能无法支撑强互动型的云 VR 渲染和数据传输，未来的 6G 可以完全实现。<br>
感知和自然交互技术</p>
<p>Inside-out 技术<br>
基于单目/双目/多目视觉+IMU 的 inside-out 技术取代早期的 Outside-in 技术开始产品化，特别是在 VR 一体机设备，如 Oculus Quest /Oculus Quest 2，HTC Vive Focus 等。<br>
可以实现：<br>
1.追踪定位<br>
2.手势动作识别</p>
<p>FOV 眼动追踪技术<br>
眼动追踪的原理其实很简单，就是使用红外摄像头和 LED 捕捉人眼或脸部的图像，然后用算法实现人脸和人眼的检测、定位和跟踪，从而估算用户的视线变化。目前主要使用光谱成像和红外光谱成像两种图像处理方法，前一种需要捕捉虹膜和巩膜之间的轮廓，而后一种则跟踪瞳孔轮廓。</p>
<p>SLAM<br>
基于 RGBD 相机和红外 TOF、激光雷达和 AI 算法等实现实时场景 3D 重建，在机器人、无人机和 AR/VR 设备如 HoloLens 中得到普遍应用，<br>
除此之外，还有语音交互和语义理解、触觉反馈，嗅觉及其它感觉及模拟器。</p>
<p>另外还有一个非常亮的亮点——脑机接口（大脑和计算机直接进行交互，有时候又被称为意识-机器交互,神经直连。脑机接口是人或者动物大脑和外部设备间建立的直接连接通道，又分为单向脑机接口和双向脑机接口）。</p>
<p>单向脑机接口只允许单向的信息通讯，比如只允许计算机接受大脑传来的命令，或者只允许计算机向大脑发送信号（比如重建影像）。而双向脑机接口则允许大脑和外部计算机设备间实现双向的信息交换。</p>
<p>如何参与元宇宙</p>
<p>作为开发者也好，作为兴趣者也好，我们如何来参与元宇宙呢？<br>
未来 5 年产业发展预测</p>
<p>首先看一下产业链的构成，它包括硬件、平台、工具、内容、行业应用，还有服务。</p>
<p>硬件有分很多分支，比如终端设备，还有其中的零部件等等，其中：</p>
<p>1.2022 年将是 AR/VR 行业真正爆发的元年，特别是 VR；<br>
2.VR 设备从 2021 年 OCQ2 代单款突破千万销量后，将开始爆发式增长；<br>
3.苹果新品将让 AR/VR 从小众精英人群的玩具走向大众，其行业影响力不容小觑；<br>
4.终端设备从 2022 年开始将成为巨头逐鹿的市场，小型创业团队的窗口期接近关闭，从 2021 年下半年开始会看到更为密集的战略型投融资或并购事件发生；<br>
5.AR 设备在接近诸多技术问题之前，主要仍将面向 2B 市场，在 2025 年可能迎来爆发；<br>
6.核心器件方面（芯片、显示屏、光学器件、声光电传感器等模组）投入巨大，不适合初创型团队，目前仍然是巨头以及上市公司体量团队的天下。但该部分也是构成终端设备比例最大的部分；<br>
7.感知交互方面，目前并没有统一的行业标准，空间定位、手势交互、眼动追踪、全身动捕、语音交互、脑机交互都处于发展的早期阶段，该领域有众多的初创企业。而 Facebook、苹果等公司收购的重点也在该领域的领先技术团队；<br>
8.其它配套外设，目前全景相机领域已有脱颖而出的领先者，如 Insta360，其它领域因生态系统尚未标准化，有较大的空间。<br>
工具平台</p>
<p>1.工具平台中的系统级平台（操作系统/UI）仍将由巨头把控，特别是苹果、Facebook，国内厂商如能接受移动互联网时代的教训，应在第一时间切入底层系统平台的打造，否则仍将受制于人<br>
2.AR/VR 内容创建工具目前虽然已经有 Unity/UE4 等市场领先产品，但是因为设备平台的独特性，仍然有巨大的潜力空间，包括 SDK、3D 开发引擎、基于 AI 技术的自动化 3D 场景和角色建模工具、基于 AI 技术的高效渲染软件等，都有足够的空间。该部分也给初创型团队留下了足够的机会。<br>
内容-内容创作</p>
<p>随着三大核心产品的爆发，以及 C 端的量级突破，内容创作方面将迎来全面繁荣，包括影视、游戏、直播、社交、3D/全景等。而内容创作因为其创意和开放性属性，一向是初创团队的首选，在硬件和工具平台领域形成各自王者之后，将有越来越多的团队加入该领域。内容创作和工具平台的交集是类似 Roblox 的“元宇宙”大型多人在线社交类产品。<br>
内容-内容分发</p>
<p>1.系统级别的内容分发和流量入口仍将占据首要地位，特别是后续的苹果生态<br>
2.类似移动互联网的安卓商城生态，将有众多的第三方内容分发平台涌现，比如专门针对 Oculus Quest 的 SideQuest 平台。3.类似于移动互联网时代的微信，后续也将有类似微信的超级 APP 出现，同样可以扮演内容分发的角色。<br>
行业应用</p>
<p>1.在国内市场，行业应用领域短期内仍将是 VR 的主要商业变现应用场景，如面向职业教育的教育培训、医疗健康、军事训练等。<br>
2.在可预见的 5 年周期内，AR 的主要应用场景仍然集中在行业领域，特别是智能制造、数字孪生等。<br>
服务</p>
<p>随着行业的爆发式增长，相关的媒体、协会、线下活动等也会更加活跃起来，并逐渐形成集媒体、投融资服务、产品推介等为一体的综合服务，类似移动互联网时代的 36kr 等。部分媒体也会朝内容分发的方向去尝试。<br>
总结</p>
<p>我们见证了历史，也步入了未来。人人皆可改变世界。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Dynamic Class Loading in the JavaTM Virtual Machine]]></title>
        <id>https://biggerex.github.io/post/dynamic-class-loading-in-the-javatm-virtual-machine/</id>
        <link href="https://biggerex.github.io/post/dynamic-class-loading-in-the-javatm-virtual-machine/">
        </link>
        <updated>2021-12-01T00:58:59.000Z</updated>
        <content type="html"><![CDATA[<p>Class loaders are a powerful mechanism for dynamically loading software  components on the Java platform. They are unusual in supporting all of the following features:laziness, type-safe linkage, user-defined extensibility,and multiple communicating namespaces.</p>
<p>类加载器为Java平台上动态加载软件组件提供了一种强大机制，特别支持以下特性：动态加载 、类型安全链接 、可扩展性支持用户自定义、多个通信命名空间。</p>
<p>1   Introduction</p>
<p>In this paper, we investigate an important feature of the Java virtual machine: dynamic class loading. This is the underlying mechanism that provides much of the power of the Java platform: the ability to install software components at runtime. An example of a component is an applet that is downloaded into a web browser.</p>
<p>在本文中，我们研究了Java虚拟机的一个重要特性：动态类加载。这是为Java平台提供大部分功能的底层机制：在运行时安装软件组件。组件的一个示例是通过web browser下载applet</p>
<p>While many other systems [16] [13] also support some form of dynamic loading and linking, the Java platform is the only system we know of that incorporates all of the following features:</p>
<p>虽然许多其他系统 [16] [13] 也支持某种形式的动态加载和链接，但 Java 平台是我们所知道的唯一包含以下所有功能的系统：</p>
<ol>
<li>Lazy loading. Classes are loaded on demand. Class loading is delayed as long as possible, reducing memory usage and improving system response time.</li>
</ol>
<p>延迟加载。类都是按需加载。尽可能延迟类加载，减少内存使用和提升系统响应时间</p>
<ol start="2">
<li>Type-safe linkage. Dynamic class loading must not violate the type safety of the Java virtual machine. Dynamic loading must not require additional run-time checks in order to guarantee type safety. Additional link-time checks are acceptable, because these checks are performed only once.</li>
</ol>
<p>类型安全链接。动态类加载不能违反JVM类型安全。动态加载必须不需要额外的运行时检查以保证类型安全。额外的链接时检查是允许的，因为这个检查执行是一次性的</p>
<ol start="3">
<li>User-definable class loading policy. Class loaders are first-class objects. Programmers have complete control of dynamic class loading. A user-defined class loader can, for example, specify the remote location from which the classes are loaded, or assign appropriate security attributes to classes loaded from a particular source.</li>
</ol>
<p>用户自定义类加载策略。类加载是第一类对象。程序员可以完全控制动态类加载。一个用户自定义类加载可以指定类加载的远程位置，或者为从特定源加载的类分配适当的安全属性</p>
<ol start="4">
<li>Multiple namespaces. Class loaders provide separate namespaces for different software components. For example, the HotjavaTM browser loads applets from different sources into separate class loaders. These applets may contain classes of the same name, but the classes are treated as distinct types by the Java virtual machine.</li>
</ol>
<p>多个命名空间。 类加载器为不同的软件组件提供不同的命名空间。 例如，HotjavaTM 浏览器将来自不同来源的小程序加载到不同的类加载器中。 这些小程序可能包含同名的类，但 Java 虚拟机将这些类视为不同的类型。</p>
<p>In contrast, existing dynamic linking mechanisms do not support all of these features. Although most operating systems support some form of dynamic linked libraries, such mechanisms are targeted toward C/C++ code, and are not type-safe. Dynamic languages such as Lisp [13], Smalltalk [6], and Self [21] achieve type safety through additional run-time checks, not link-time checks.</p>
<p>相比之下，现有的动态链接机制并不支持所有这些功能。 尽管大多数操作系统都支持某种形式的动态链接库，但这种机制是针对 C/C++ 代码的，并且不是类型安全的。 Lisp [13]、Smalltalk [6] 和 Self [21] 等动态语言通过额外的运行时检查而不是链接时检查来实现类型安全。</p>
<p>The main contribution of this paper is to provide the first in-depth description of class loaders, a novel concept introduced by the Java platform. Class loaders existed in the first version of the Java Development Kit (JDK 1.0). The original purpose was to enable applet class loading in the Hotjava browser. Since that time, the use of class loaders has been extended to handle a wider range of software components such as server-side components (servlets) [11], extensions [10] to the Java platform, and JavaBeans [8] components. Despite the increasingly important role of class loaders, the underlying mechanism has not been adequately described in the literature.</p>
<p>本文的主要贡献是首次对类加载器进行了深入描述，这是 Java 平台引入的一个新概念。 类加载器存在于 Java 开发工具包 (JDK 1.0) 的第一个版本中。 最初的目的是在 Hotjava 浏览器中启用小程序类加载。 从那时起，类加载器的使用已经扩展到处理更广泛的软件组件，例如服务器端组件 (servlet) [11]、Java 平台的扩展 [10] 和 JavaBeans [8] 组件。 尽管类加载器的作用越来越重要，但其底层机制尚未在文献中得到充分描述。</p>
<p>A further contribution of this paper is to present a solution to the long-standing type safety problem [20] with class loaders. Early versions (1.0 and 1.1) of the JDK contained a serious aw in class loader implementation. Improperly written class loaders could defeat the type safety guarantee of the Java virtual machine. Note that the type safety problem did not impose any immediate security risks, because untrusted code (such as a downloaded applet) was not allowed to create class loaders. Nonetheless, application programmers who had the need to write custom class loaders could compromise type safety inadvertently. Although the issue had been known for some time, it remained an open problem in the research community whether a satisfactory solution exists. For example, earlier discussions centered around whether the lack of type safety was a fundamental</p>
<p>本文的另一个贡献是针对类加载器长期存在的类型安全问题 [20] 提出了解决方案。 JDK 的早期版本（1.0 和 1.1）在类加载器实现中包含一个严重的缺陷。编写不当的类加载器可能会破坏 Java 虚拟机的类型安全保证。请注意，类型安全问题不会带来任何直接的安全风险，因为不允许不受信任的代码（例如下载的小程序）创建类加载器。尽管如此，需要编写自定义类加载器的应用程序程序员可能会无意中危及类型安全。尽管该问题已经为人所知一段时间，但是否存在令人满意的解决方案仍然是研究界的一个悬而未决的问题。例如，早期的讨论集中在缺乏类型安全是否是用户可定义类加载器的基本限制，以及我们是否必须限制类加载器的功能、放弃延迟类加载或在运行时引入额外的动态类型检查.我们在本文中提出的解决方案已在 JDK 1.2 中实现，解决了类型安全问题，同时保留了类加载器的所有其他理想特性。</p>
<p>We assume the reader has basic knowledge of the Java programming language [7]. The remainder of this paper is organized as follows: We first give a more detailed introduction to class loaders. Applications of class loaders are discussed in section 3. Section 4 describes the type safety problems that may arise due to the use of class loaders, and their solutions. Section 5 relates our work to other research. Finally, we present our conclusions in section 6.</p>
<p>我们假设读者都具有java程序语言基础知识，本文的其余部分安排入戏：我首先将对类加载器进行更详细的介绍。第3章讨论类加载器的应用。第4章描述由于类加载器导致的类型安全问题以及解决方案。第5章将我们的工作与其他研究联系起来。最后我们在第6节给出我们的结论。</p>
<p>2 Class Loaders</p>
<p>The purpose of class loaders is to support dynamic loading of software components on the Java platform. The unit of software distribution is a class	. Classes are distributed using a machine-independent, standard, binary representation known as the class file format [15]. The representation of an individual class is referred to as a class file. Class files are produced by Java compilers, and can be loaded into any Java virtual machine. A class file does not have to be stored in an actual file; it could be stored in a memory buffer, or obtained from a network stream.</p>
<p>类加载器的目的是为java平台上动态加载软件组件。软件的分发单位为类。类使用独立于机器的标准二进制表示形式分发，称为类文件格式。单个类的表示称为类文件。类文件由java编译器生成，并且可以被加载到jvm，类文件不是必须存储在实际文件中，它可以存储在内存缓存或者从网络流中获得。</p>
<p>The Java virtual machine executes the byte code stored in class files. Byte code sequences, however, are only part of what the virtual machine needs to execute a program. A class file also contains symbolic references to fields, methods, and names of other classes. Consider, for example, a class declared as follows:</p>
<p>Java 虚拟机执行存储在类文件中的字节码。 然而，字节码序列只是虚拟机执行程序所需的一部分。 类文件还包含对其他类的字段、方法和名称的符号引用。 例如，考虑如下声明的类</p>
<pre><code>                    class C {
                            void f () {
                                D d = new D();
                                ...
                            }
                        }
</code></pre>
<p>The class file representing  contains a symbolic reference to class D . Symbolic references are resolved at link time to actual class types. Class types are reified first-class objects in the Java virtual machine. A class type is represented in user code as an object of class java.lang.Class  In order to resolve a symbolic reference to a class, the Java virtual machine must load the class file and create the class type.</p>
<p>上述类文件C表示包含对类D的符号引用。符号引用在链接时被解析成实际的Class type。Class type 在jvm中是具体化的首个类对象。一个 Class type 在用户代码中用java.lang.Class对象表示并按顺序解析符号引用，jvm必须加载类文件并创建class type</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[如何利用大数据进行预测性营销，看完这8个深度解答你就懂了]]></title>
        <id>https://biggerex.github.io/post/jing-zhun-ying-xiao/</id>
        <link href="https://biggerex.github.io/post/jing-zhun-ying-xiao/">
        </link>
        <updated>2021-11-25T07:38:51.000Z</updated>
        <content type="html"><![CDATA[<h1 id="如何利用大数据进行预测性营销看完这8个深度解答你就懂了">如何利用大数据进行预测性营销，看完这8个深度解答你就懂了</h1>
<p>2018-02-28阅读 5.6K0</p>
<h2 id="1-什么是精准营销预测营销">1、什么是精准营销，预测营销？</h2>
<p>说到精准营销，不得不先提个性化的用户画像，我们针对每一类数据实体，进一步分解可落地的数据维度，刻画他／她的每一个特征，在聚集起来形成人群画像。比如下面就是两种典型年轻消费人群。</p>
<figure data-type="image" tabindex="1"><img src="https://ask.qcloudimg.com/http-save/yehe-1296778/5jvxidep07.jpeg?imageView2/2/w/1620" alt="" loading="lazy"></figure>
<p>具体又包括：</p>
<p>用户固定特征：性别，年龄，地域，教育水平，生辰八字，职业，星座</p>
<p>用户兴趣特征：兴趣爱好，使用APP，网站，浏览／收藏／评论内容，品牌偏好，产品偏好</p>
<p>用户社会特征：生活习惯，婚恋，社交/信息渠道偏好，宗教信仰，家庭成分</p>
<p>用户消费特征：收入状况，购买力水平，商品种类，购买渠道喜好，购买频次</p>
<p>用户动态特征：当下时间，需求，正在前往的地方，周边的商户，周围人群，新闻事件</p>
<figure data-type="image" tabindex="2"><img src="https://ask.qcloudimg.com/http-save/yehe-1296778/ucibjanfym.jpeg?imageView2/2/w/1620" alt="" loading="lazy"></figure>
<p>当我们采集和分析这些用户画像，可以实现精准营销。这是最直接和最有价值的应用，广告主可以通过用户标签来发布广告给所要触达的用户，这里面又可以通过上图提到的搜索广告，展示社交广告，移动广告等多渠道的营销策略，营销分析，营销优化以及后端CRM／供应链系统打通的一站式营销优化，全面提升ROI。</p>
<figure data-type="image" tabindex="3"><img src="https://ask.qcloudimg.com/http-save/yehe-1296778/a5bvp62g0k.jpeg?imageView2/2/w/1620" alt="" loading="lazy"></figure>
<p>我们再说一说营销时代的变迁，传统的企业大多还停留在“营销1.0”时代，以产品为中心，满足传统的消费者需求，而进入“营销2.0”，以社会价值与品牌为使命，也不能完全精准对接个性化需求。进入营销3.0的数据时代，我们要对每个消费者进行个性化匹配，一对一营销，甚至精确算清楚成交转化率，提高投资回报比。</p>
<p>大数据下的营销颠覆经典的营销4P理论，Product，Price，Place，Promotion，取而代之的是新的4P，People，Performance，Process，Prediction。在大数据时代，线下地理的竞争边界早就不存在，比的是早一步的先知能力，利用大数据，从顾客真实交易数据中，计算下一次的购买时间。 营销3.0时代关键词就是“预测”。</p>
<figure data-type="image" tabindex="4"><img src="https://ask.qcloudimg.com/http-save/yehe-1296778/jsr4041jud.jpeg?imageView2/2/w/1620" alt="" loading="lazy"></figure>
<p>预测营销能够让你专注于一小群客户，而这群客户却能代表特定产品的大多数潜在买家。以上图为例，你可以将营销活动的目标受众锁定为 20 万潜在客户或现有客户，其中包括特定产品的大多数买家（4 万人）。你还可以拨出部分预算用于吸引更小的客户群（比如 20% 的客户），而不是整个客户群，进而优化你的支出。</p>
<p>过去我们看数据可能是被动的方式，但预测营销强调是决策价值，比如购买时间，你该看的不是她最后的购买日期，而是下次购买的时间，看未来的存活概率，最后生成客户终身价值（CLV）。预测营销催生了一种新的数据驱动营销方式，就是以客户为中心，核心在于帮助公司完成从以产品或渠道为中心到以客户为中心的转变。</p>
<h2 id="2-在现代商业中大数据的价值体现在哪">2、在现代商业中大数据的价值体现在哪？</h2>
<p>大数据最大的价值不是事后分析，而是预测和推荐，我就拿电商举例，&quot;精准推荐&quot;成为大数据改变零售业的核心功能。譬如服装网站Stitch fix例子，在个性化推荐机制方面，大多数服装订购网站采用的都是用户提交身形、风格数据+编辑人工推荐的模式，Stitch Fix不一样的地方在于它还结合了机器算法推荐。这些顾客提供的身材比例，主观数据，加上销售记录的交叉核对，挖掘每个人专属的服装推荐模型。 这种一对一营销是最好的服务。</p>
<figure data-type="image" tabindex="5"><img src="https://ask.qcloudimg.com/http-save/yehe-1296778/yjwdrux7ad.jpeg?imageView2/2/w/1620" alt="" loading="lazy"></figure>
<p>数据整合改变了企业的营销方式，现在经验已经不是累积在人的身上，而是完全依赖消费者的行为数据去做推荐。未来，销售人员不再只是销售人员，而能以专业的数据预测，搭配人性的亲切互动推荐商品，升级成为顾问型销售。</p>
<h2 id="3-一个例子说明精准营销的好处">3、一个例子说明精准营销的好处</h2>
<p>“颠覆营销”书中提到一个例子，可以引述一下，大家思考一个问题：如果你打算搜集200份有效问卷，依照以往的经验，你需要发多少份问卷，才能达到这个目标？预计用多少预算和时间来执行？</p>
<p>以往的方法是这样的：评估网络问卷大约是5%的回收率，想要保证收到200份的问卷，就必须有20倍的发送量，也就是发出4000份问卷，一个月内如果可以回收，就是不错的表现。</p>
<p>但现在不一样了，在执行大数据分析的3小时内，就可以轻松完成以下的目标：</p>
<ul>
<li>精准挑选出1%的VIP顾客</li>
<li>发送390份问卷，全部回收</li>
<li>问卷寄出3小时内回收35%的问卷</li>
<li>5天内就回收了超过目标数86%的问卷数</li>
<li>所需时间和预算都在以往的10%以下</li>
</ul>
<p>这是怎么做到在问卷发送后的3个小时就回收35%？那是因为数据做到了发送时间的&quot;一对一定制化&quot;，利用数据得出，A先生最可能在什么时间打开邮件就在那个时间点发送问卷。举例来说，有基人在上班路上会打开邮件，但如果是开车族，并没有时间填写答案，而搭乘公共交通工具的人，上班路上的时间会玩手机，填写答案的概率就高，这些都是数据细分受众的好处。</p>
<h2 id="4-如何生成用户的精准画像">4、如何生成用户的精准画像？</h2>
<p>大致分成三步。</p>
<p>采集和清理数据：用已知预测未知</p>
<p>首先得掌握繁杂的数据源。包括用户数据、各式活动数据、电子邮件订阅数、线上或线下<a href="https://cloud.tencent.com/solution/database?from=10680">数据库</a>及客户服务信息等。这个是累积数据库；这里面最基础的就是如何收集网站／APP用户行为数据。比如当你登陆某网站，其Cookie就一直驻留在浏览器中，当用户触及的动作，点击的位置，按钮，点赞，评论，粉丝，还有访问的路径，可以识别并记录他／她的所有浏览行为，然后持续分析浏览过的关键词和页面，分析出他的短期需求和长期兴趣。还可以通过分析朋友圈，获得非常清晰获得对方的工作，爱好，教育等方面，这比个人填写的表单，还要更全面和真实。</p>
<p>我们用已知的数据寻找线索，不断挖掘素材，不但可以巩固老会员，也可以分析出未知的顾客与需求，进一步开发市场。</p>
<p>用户分群：分门别类贴标签</p>
<p>描述分析是最基本的分析统计方法，描述统计分为两大部分：数据描述和指标统计。数据描述：用来对数据进行基本情况的刻画，包括数据总数，范围，数据来源。指标统计：把分布，对比，预测指标进行建模。这里常常是Data mining的一些数学模型，像响应率分析模型，客户倾向性模型，这类分群使用Lift图，用打分的方法告诉你哪一类客户有较高的接触和转化的价值。</p>
<p>在分析阶段，数据会转换为影响指数，进而可以做&quot;一对一&quot;的精准营销。举个例子，一个80后客户喜欢在生鲜网站上早上10点下单买菜，晚上6点回家做饭，周末喜欢去附近吃日本料理，经过搜集与转换，就会产生一些标签，包括&quot;80后&quot;&quot;生鲜&quot;&quot;做饭&quot;&quot;日本料理&quot;等等，贴在消费者身上。</p>
<p>制定策略：优化再调整</p>
<p>有了用户画像之后，便能清楚了解需求，在实际操作上，能深度经营顾客关系，甚至找到扩散口碑的机会。例如上面例子中，若有生鲜的打折券，日本餐馆最新推荐，营销人员就会把适合产品的相关信息，精准推送这个消费者的手机中；针对不同产品发送推荐信息，同时也不断通过满意度调查，跟踪码确认等方式，掌握顾客各方面的行为与偏好。</p>
<p>除了顾客分群之外，营销人员也在不同时间阶段观察成长率和成功率，前后期对照，确认整体经营策略与方向是否正确；若效果不佳，又该用什么策略应对。反复试错并调整模型，做到循环优化。</p>
<figure data-type="image" tabindex="6"><img src="https://ask.qcloudimg.com/http-save/yehe-1296778/sv54zvt23b.jpeg?imageView2/2/w/1620" alt="" loading="lazy"></figure>
<p>这个阶段的目的是提炼价值，再根据客户需求精准营销，最后追踪客户反馈的信息，完成闭环优化。</p>
<p>我们从数据整合导入开始，聚合数据，在进行数据的分析挖掘。数据分析和挖掘还是有一些区别。数据分析重点是观察数据，单纯的统计，看KPI的升降原因。而数据挖掘从细微和模型角度去研究数据，从学习集、训练集发现知识规则，</p>
<p>除了一些比较商业化的软件SAS，WEKA功能强大的数据分析挖掘软件，这边还是更推荐使用R，Python，因为SAS，SPSS本身比较昂贵，也很难做页面和服务级别的API，而Python和R有丰富的库，可以类似WEKA的模块，无缝交互其他API和程序，这里还需要熟悉数据库，Hadoop等。</p>
<h2 id="5-预测性营销的选择方案有哪些呢这里的开发用到哪些技术和工具">5、预测性营销的选择方案有哪些呢？这里的开发用到哪些技术和工具？</h2>
<p>关于预测营销的技术能力，有几种选择方案：</p>
<p>1、使用预测分析工作平台，然后以某种方法将模型输入活动管理工具； 2、以分析为动力的预测性活动外包给市场服务提供商；3、评估并购买一个预测营销的解决方案，比如预测性营销云和多渠道的活动管理工具。</p>
<p>这里我也总结一些常用的技术工具 ：</p>
<figure data-type="image" tabindex="7"><img src="https://ask.qcloudimg.com/http-save/yehe-1296778/virhagzfot.jpeg?imageView2/2/w/1620" alt="" loading="lazy"></figure>
<p>但无论哪条路，都要确定三项基本能力。</p>
<p>1）连接不同来源的客户数据，包括线上，线下，为预测分析准备好数据 ；</p>
<p>2）分析客户数据，使用系统和定制预测模型，做高级分析 ；</p>
<p>3）在正确时间，正确客户，正确的场景出发正确行为，可能做交叉销售，跨不同营销系统。</p>
<h2 id="6-营销领域有哪些预测模型">6、营销领域有哪些预测模型？</h2>
<p>预测客户购买可能性的行业标准是RFM模型（最近一次消费R，消费频率F，消费金额M），但模型应用有限，本质是一个试探性方案，没有统计和预测依据。“过去的成绩不能保证未来的表现”，RFM只关注过去，不去将客户当前行为和其他客户当前行为做对比。这样就无法在购买产品之前识别高价值客户。</p>
<p>我们聚焦的预测模型，就是为了在最短时间内对客户价值产生最大影响。这里列举一些其他模型参考：</p>
<ul>
<li>参与倾向模型，预测客户参与一个品牌的可能性，参与定义可以多元，比如参加一个活动，打开电子邮件，点击，访问某页面。可以通过模型来确定EDM的发送频率。并对趋势做预测，是增加还是减少活动。</li>
<li>钱包模型，就是为每个客户预测最大可能的支出，定义为单个客户购买产品的最大年度支出。然后看增长模型，如果当前的总目标市场比较小，但未来可能很大，就需要去发现这些市场。</li>
<li>价格优化模型，就是能够去最大限度提升销售，销量或利润的架构，通过价格优化模型为每个客户来定价，这里需要对你想要的产品开发不同的模型，或者开发通用，可预测的客户价格敏感度的模型，确定哪一块报价时对客户有最大的影响。</li>
<li>关键字推荐模型。关键字推荐模型可以基于一个客户网络行为和购买记录来预测对某个内容的喜爱程度，预测客户对什么热点，爆款感兴趣，营销者使用这种预测结果为特定客户决定内容营销主题。</li>
<li>预测聚集模型。预测聚集模型就是预测客户会归为哪一类。</li>
</ul>
<h2 id="7-目前对于预测性营销技术国际上有哪些技术创新和开发工具目前的使用瓶颈和顾虑是什么">7、目前对于预测性营销技术，国际上有哪些技术创新和开发工具？目前的使用瓶颈和顾虑是什么？</h2>
<p>预测营销技术以模型工具存在了很多年，比如一些统计分析软件 SAS，SPSS，R，还有像Netflix，Amazon，Facebook，Ebay，电信领域Verizon，ATT这些大公司，都有数据科学家团队，他们都在开发基于预测性的广告和营销系统。但这些工具都有一些重要的缺点，在你使用预测分析平台之前，首先要把业务需求翻译成技术需求，这样数据科学家才能将其转化为模型和查询语句。</p>
<p>大多数市场营销人员还是这方面能力不足，没有工程师和商业分析师的支持的话，就要从头做重复劳动，选择适当模型，去解决商业问题。而数据科学家往往也局限在某个行业内，找到合适的人才非常难，也很难跨行业获得经验。</p>
<p>在使用大数据平台时，往往要求在以下方面：整合数据，准备数据，开发，测试，配置模型，IT设施和数据架构都需要持续配合，才能最后帮助运营者生成报告并准备活动的名单。比如笔者当时在LinkedIn的广告部门，我们的数据科学家建立了一套强大的分析算法去计算预估CTR，预估bid price，预估受众，但一旦脱离了LinkedIn的网站，广告主也没办法重复分析和得到持续的预测评分，而每个公司重新搭建一套大数据平台也是费时费力。</p>
<p>另外在个人信息使用上要特别注意隐私问题，顾客心理会有一些心理差异，比如客户的电话，邮箱注册某品牌电商（Tiffany）后，收到一些竞争对手如香奈儿不停给你发送广告，你也许会很生气。根据消费者报告，有71%的人认为，他们担心电商在不经过她们同意就出售或分享信息，因为越来越多的营销者从使用第三方的信息记录转向使用第一方数据来进行营销。</p>
<p>还有个“最后一公里”问题，比如说“我们拿到了网站注册的大量信息，也通过模型预测出来最有可能购买的客户，但作为运营人员，我无法根据客户分享给我的偏好和日期去发布一个Campaign（促销）”，就是说预测模型的输出结果对于营销人员来说很难使用—— 无法将日常的邮件，广告，门店和客户互动等营销活动结合起来。</p>
<h2 id="8-机器学习技术在预测营销领域是如何应用会有怎样的发展">8、机器学习技术在预测营销领域是如何应用，会有怎样的发展？</h2>
<p>去年人工智能特别火，特别是深度学习在机器视觉，语言识别，游戏AI上的突飞猛进，以至于人们开始恐慌人工智能是不是已经可以接管人类工作，我个人是对新技术有着强烈的兴趣，也非常看好新科技，数据与现实的关联。</p>
<figure data-type="image" tabindex="8"><img src="https://ask.qcloudimg.com/http-save/yehe-1296778/u7mycxoldz.jpeg?imageView2/2/w/1620" alt="" loading="lazy"></figure>
<p>我以前在国外零售店买单的时候经常被询问“你有没有购物卡”，当我说没有收银员会赶紧劝我免费开通，有打折优惠，只需要填个手机号和邮箱，后面就可以针对我的购买记录做营销活动，而当我下次进来，他们就让我报出电话号码做消费者识别，当时我想如果做到<a href="https://cloud.tencent.com/product/facerecognition?from=10680">人脸识别</a>，岂不是更方便，刷脸就可以买单。而这个场景在去年也有了实验，蚂蚁金服研发出了一个生物识别机器人，叫蚂可Mark，据说其认脸能力已经超越了人类肉眼的能力。还有VR购物，Amazon推出的无收银员商店Amazon Go，通过<a href="https://cloud.tencent.com/product/gr?from=10680">手势识别</a>，物联网和后续数据挖掘等技术实现购物体验。</p>
<figure data-type="image" tabindex="9"><img src="https://ask.qcloudimg.com/http-save/yehe-1296778/5nwq41dmld.jpeg?imageView2/2/w/1620" alt="" loading="lazy"></figure>
<p>针对营销领域，主要有以下三种预测营销技术。</p>
<p>1 无监督的学习技术</p>
<p>无监督学习技术能识别数据中的隐藏模式，也无须明确预测一种结果。比如在一群客户中发现兴趣小组，也许是滑雪，也许是长跑，一般是放在聚类算法，揭示数据集合中 真实的潜在客户。所谓聚类，就是自动发现重要的客户属性，并据此做分类。</p>
<p>2 有监督的学习技术</p>
<p>通过案例训练机器，学习并识别数据，得到目标结果，这个一般是给定输入数据情况下预测，比如预测客户生命周期价值，客户与品牌互动的可能性，未来购买的可能性。</p>
<p>3 强化学习技术</p>
<p>这种是利用数据中的潜质模式，精准预测最佳的选择结果，比如对某用户做促销应该提供哪些产品。这个跟监督学习不同，强化学习算法无须仅需输入和输出训练，学习过程通过试错完成。</p>
<figure data-type="image" tabindex="10"><img src="https://ask.qcloudimg.com/http-save/yehe-1296778/0nue1kh0cd.jpeg?imageView2/2/w/1620" alt="" loading="lazy"></figure>
<p>从技术角度看，推荐模型应用了协同过滤，贝叶斯网络等算法模型。强化学习是被Google Brain团队的负责人Jeff Dean认为是最有前途的AI研究方向之一。最近Google的一个AI团队DeepMind发表了一篇名为《<a href="https://cloud.tencent.com/developer/article/1047150"><u>学会强化学习</u></a>》的论文。按团队的话来说，叫做“学会学习”的能力，或者叫做能解决类似相关问题的归纳能力。除了强化学习，还在迁移学习。迁移学习就是把一个通用模型迁移到一个小数据上，使它个性化，在新的领域也能产生效果，类似于人的举一反三、触类旁通。强化学习加上迁移学习，能够把小数据也用起来，我认为是很激动人心的，通过AI来创造AI，数据科学家的部分工作也可以让机器来实现了。</p>
<p>本文分享自微信公众号 - BestSDK（bestsdk）</p>
<p>原文出处及转载信息见文内详细说明，如有侵权，请联系 yunjia_community@tencent.com 删除。</p>
<p>原始发表时间：2017-02-24</p>
<p>本文参与<a href="https://cloud.tencent.com/developer/support-plan">腾讯云自媒体分享计划</a>，欢迎正在阅读的你也加入，一起分享。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[要想程序跑的快，优化这三个因子]]></title>
        <id>https://biggerex.github.io/post/yao-xiang-cheng-xu-pao-de-kuai-you-hua-zhe-san-ge-yin-zi/</id>
        <link href="https://biggerex.github.io/post/yao-xiang-cheng-xu-pao-de-kuai-you-hua-zhe-san-ge-yin-zi/">
        </link>
        <updated>2021-11-25T07:31:26.000Z</updated>
        <content type="html"><![CDATA[<p>1.冯诺依曼模型<br>
内存：我们的程序和数据都是存储在内存，存储的区域是线性的。数据存储的单位是一个二进制位，即0或1。最小的存储单位是字节，1字节等于8位。内存的地址是从0开始编号的，然后自增排列，最后一个地址为内存总字节数-1，这种结构好似我们程序里的数组，所以内存的读写任何一个数据的速度都是一样的。<br>
中央处理器：也就是我们常说的CPU，32位和64位CPU最主要的区别在于一次能计算多少字节数据：32位CPU一次可以计算4个字节；64位CPU一次可以计算8个字节；这里32位和64位，通常称为CPU的位宽。之所以CPU要这样设计，是为了能计算更大的数值，如果是8位的CPU，那么一次只能计算1个字节0-255范围内的数值，这样就无法一次完成计算10000*500，于是为了能一次计算最大的运算，CPU支持多个byte一起计算，所以CPU位宽越大，可计算的数值就越大，32位CPU能计算最大整数是4294967295.<br>
CPU还有一些内部组件，常见的寄存器，控制单元和逻辑运算单元等。其中，控制单元负责控制CPU工作，逻辑运算负责计算，而寄存器可以分为多种类，每种寄存器的功能又不尽相同。CPU中的寄存器主要作用是存储计算时的数据，你可能好奇为什么有了内存还需要寄存器？原因很简单，因为内存离CPU太远了，而寄存器就在CPU里，还紧挨着控制单元和逻辑运算单元，自然计算会很快。<br>
常见起存器种类：<br>
通用寄存器，用来存放需要进行运算的数据，比如需要进行加和运算的两个数据。<br>
程序计数器，用来存储CPU要执行下一条指令【所在的内存地址】，注意不是存储了下一条要执行的指令，此时指令还在内存中，程序计数器只是存储了下一条指令的地址。<br>
指令寄存器，用来存放程序计数器指向的指令，也就是指令本身，指令被执行完成之前，指令都存储在这里。<br>
总线：总线是用于CPU和内存以及其他设备之间的通信，总线可分为3种：<br>
地址总线：用于指定CPU将要操作的内存地址；<br>
数据总线，用于读写内存的数据；<br>
控制总线：用于发送和接收信号，比如中断，设备复位等信号，CPU接收到信号后自然进行响应，这是也需要控制总线；<br>
当CPU要读写内存数据的时候，一般需要通过两个总线：<br>
首先要通过【地址总线】来指定内存的地址；<br>
再通过【数据总线】来传输数据；<br>
输入、输出设备：输入设备向计算机输入数据，计算机经过计算之后，把数据输出给输出设备。期间，如果输入设备是键盘，按下按键时是需要和CPU进行交互的，这时就需要用到控制总线了。<br>
2.线路位宽与CPU位宽<br>
数据是如何通过线路传输的呢？其实是通过操作电压，低电压表示0，高电压则表示1.如果构造了高低高这样的信号，其实就是101二进制数据，十进制则表示5，如果只有一条线路，就意味着每次只能传递1bit的数据，即0或1，那么传输101这个数据，就需要3次才能传输完成，这样的效率非常低。这样一位一位传输的方式，称为串行，下一个bit必须等待上一个bit传输完成才能进行传输。当然，想一次多传一些数据，增加线路即可，这时数据就可以并行传输。为了避免低效率的串行传输方式，线路的位宽最好一次就能访问到所有的内存地址。CPU要想操作的内存地址就需要地址总线，如果地址总线只有一条，那每次只能表示【0或1】这两种情况，所以CPU一次只能操作2个内存地址，如果想要CPU操作4G的内存，那么就需要32条地址总线，因为2^32=4G。<br>
CPU的位宽最好不要小于线路位宽，比如32位CPU控制40位宽的地址总线和数据总线的话，工作起来就会非常复杂且麻烦，所以32位的CPU最好和32位宽的线路搭配，因为32位CPU一次最多只能操作32位宽的地址总线和数据总线。<br>
如果用32位CPU去加和两个64位大小的数字，就需要把这2个64位的数字分成两个低位32位数字和2个高位32位数字来计算，先加个两个低位的32位数字，算出进位，然后加和两个高位的32位数字，最后再加上进位，就能算出结果了，可以发现32位CPU并不能一次性计算出加和两个64位数字的结果。<br>
对于64位CPU就可以一次性算出加和两个64位数字的结果，因为64位CPU可以一次读入64位的数字，并且64位CPU内部的逻辑运算单元也支持64位数字的计算。<br>
但是并不代表64位CPU性能比32位CPU高很多，很少应用需要算超过32位的数字，所以如果计算的数额不超过32位数字的情况下，32位和64位CPU之间没有什么区别的，只有当计算超过32位数字的情况下，64位的优势才能体现出来。<br>
另外，32位CPU最大只能操作4GB内存，就算你装了8GB内存条，也没用。而64位CPU寻址范围则很大，理论最大的寻址空间为2^64.<br>
3.程序执行的基本过程<br>
程序其实是一条一条的指令，所以程序的运行过程就是把每一条指令一步一步的执行起来，负责执行指令的就是CPU。<br>
CPU的执行程序的过程如下：<br>
·第一步，CPU读取程序计数器的值，这个值是指令的内存地址，然后CPU的控制单元操作地址总线指定需要访问的内存地址，接着通知内存设备准备数据，数据准备好后通过数据总线将指令传给CPU，CPU收到内存传来的数据后，将这个指令数据存入到指令寄存器。<br>
·第二步，CPU分析指令寄存器中的指令，确定指令的；类型和参数，如果是计算类型的指令，就把指令交给逻辑运算单元运算；如果是存储类型的指令，则交由控制单元执行；<br>
·第三步，CPU执行完指令后，程序计数器的值自增，表示指向下一条指令。这个自增的大小，由CPU的位宽决定，比如32位的CPU，指令是4个字节，需要4个内存地址存放，因此程序计数器的值会自增4；<br>
总结就是，一个程序执行的时候，CPU会根据程序计数器里的内存地址，从内存里面把需要的指令读取到指令寄存器里面执行，然后根据指令长度自增，开始顺序读取下一条指令。CPU从程序计数器读取指令，到执行，再到下一条指令，这个过程会不断循环，知道程序执行结束，这个不断循环的过程被称为CPU的指令周期。<br>
4.a=1+2执行具体过程<br>
CPU是不认识a=1+2这个字符串，这些字符串只是方便我们程序员认识，要想这段程序能跑起来，还需要把整个程序翻译成汇编语言的程序，这个过程称为编译成汇编代码。针对汇编代码，我们还需要用汇编语言翻译成机器码，这些机器码由0和1组成的机器语言，这一条条机器码，就是一条条的计算机指令，这个才是CPU能够真正认识的东西。<br>
程序编译过程中，编译器通过分析代码，发现1和2是数据，于是程序运行时，内存会有个专门的区域来存放这些数据，这个区域就是数据段。<br>
·数据1被存放到0x100位置；<br>
·数据2被存放到0x104位置；<br>
注意，数据和指令是分开区域存放的，存放指令区域的地方称为正文段。</p>
<p>编译器会把a=1+2翻译成4条指令，存放到正文段中。如图，这4条指令被存放到了0x200-0x20c的区域中:<br>
·0x200的内容是load指令将0x100地址中的数据1装入到寄存器R0；<br>
·0x204的内容是load指令将0x104地址中的数据2装入到寄存器R1；<br>
·0x208的内容是add指令将寄存器R0和R1的数据相加，并把结果存放到寄存器R2<br>
·0x20c的内容是store指令将寄存器R2中的数据存回数据段中的0x108地址中，这个地址也就是变量a内存中的地址；<br>
编译完成后，具体执行程序的时候，程序计数器会被设置为0x200地址，然后依次执行这4条指令。<br>
上面的例子中，由于是在32位CPU执行的，因此一条指令是占32位大小，所以你会发现每条指令间隔4个字节。而数据的大小是根据你在程序中的指定的变量类型，比如int类型的数据则占4个字节，char类型的数据则占一个字节。<br>
指令：<br>
上面的例子中，图中指令的内容我写的是简易的汇编代码，目的是为了方便理解指令的具体内容，事实上指令的内容是一串二进制数字的机器码，每条指令都有对应的机器码，CPU通过解析机器码来知道指令的内容。不同的CPU有不同的指令集，也就是对应着不同的汇编语言和不同的机器码，接下来选用最简单的MIPS指集，来看看机器码是如何生成的，这样也能明白二进制的机器码的具体含义。MIPS的指令是一个32位的整数，高6位代表着操作码，表示这条指令是一条什么样的指令，剩下的26位不同指令类型所表示的内容也就不相同，主要有三种类型R，I和J。</p>
<p>三种类型的含义：<br>
·R指令，用在算数和逻辑操作，里面由读取和写入数据的寄存器地址。如果是逻辑位移操作，后面还有位移的位移量，而最后的功能码则是在前面的操作码不够的时候，扩展操作码来表示对应的具体指令的；<br>
·I指令，用在数据传输，条件分支等。这个类型的指令，就没有了位移量和操作码，也没有了第三个寄存器，而是把这三部分直接合并成了一个地址值或一个常数；<br>
·J指令，用在跳转，高6位之外的26位都是一个跳转后的地址；<br>
接下来，我们把前面例子的这条指令：add指令寄存器R0和R1的数据相加，并把结果放入R3，翻译成机器码。</p>
<p>加和运算add指令是属于R指令类型：<br>
·add对应的MIPS指令里操作码是000000，以及最末尾的功能码是100000，这些数值都是固定的，查一下MIPS指令集的手册就能知道的；<br>
·rs代表第一个寄存器R0的编号，即00000；<br>
·rt代表第二个寄存器R1的编号，即00001；<br>
·rd代表目标的临时寄存器R2的编号，即00010；<br>
·因为不是位移操作，所以位移量是00000<br>
把上面这些数字拼在一起就是一条32位的MIPS加法指令了，那么用16进制表示机器码则是0x00011020。编译器在编译程序的时候，会构造指令，这个过程叫做指令的编码。CPU的执行程序的时候，就会解析指令，这个过程叫做指令的解码。现代多数CPU都使用来流水线的方式来执行指令，所谓的流水线就是把一个任务拆分成多个小任务，于是一条指令通常分为4个阶段，称为4级流水线：</p>
<p>四个阶段的含义：<br>
·CPU通过程序计数器读取对应的内存地址的指令，这个部分称为Fetch（取得指令）<br>
·CPU对指令进行解码，这个部分称为Decode（指令译码）<br>
·CPU执行指令，这个部分称为Execution（执行指令）<br>
·CPU将计算结果存回寄存器或者将寄存器的值存入内存，这个部分称为Store（数据回写）<br>
上面这四个阶段，我们称之为指令周期，CPU的工作就是一个周期接着一个周期，周而复始。事实上，不同的阶段是由计算机中的不同组件完成的：</p>
<p>·取指令的阶段，我们的指令是存放在存储器里的，实际上，通过程序计数器和指令寄存器取出指令的过程，是由控制器操作的；<br>
·指令的译码过程，也是由控制器进行的；<br>
·指令执行的过程，无论是进行算数操作，逻辑操作，还是进行数据传输，条件分支操作，都是由算数逻辑单元操作的，也就是由运算器处理的。但是如果是一个简单的无条件地址跳转，则是直接在控制器里面完成的，不需要用到运算器。<br>
指令的类型：<br>
·数据传输类型的指令，比如store/load是寄存器与内存之间数据传输的指令，mov是将一个内存地址的数据移动到另一个内存地址的指令；<br>
·运算类型的指令，比如加减乘除，位运算，比较大小等等，它们最多只能处理两个寄存器中的数据；<br>
·跳转类型的指令，通过修改程序计数器的值来达到跳转执行指令的过程，比如编程中常见的if-else，switch-case，函数调用等。<br>
·信号类型的指令，比如发生中断的指令trap；<br>
·闲置类型的指令，比如指令nop，执行后cpu会空转一个周期；<br>
指令的执行速度：<br>
CPU的硬件参数都会有GHz这个参数，比如1GHz的CPU，指的是时钟频率是1G，代表着1秒会产生1G次数的脉冲信号，每一次脉冲信号高低电平的转换就是一个周期，称为时钟周期。<br>
对于CPU来说，在一个时钟周期内，CPU仅能完成一个最基本的动作，时钟频率越高，时钟周期越短，工作速度也就越快。<br>
一个周期一定可以执行完一条指令嘛？大多数是不一定的，大多数指令不能再一个时钟周期完成，通常需要若干个时钟周期。不同的指令需要的时钟周期是不同的，加法和乘法都对应着一条CPU指令，但是乘法需要的时钟周期就要比加法多。<br>
5.如何让程序跑的更快？<br>
程序执行的时候，耗费的CPU时间少就说明程序是快的，对于程序的CPU执行时间，我们可以拆解成CPU时钟周期数和时钟周期时间的乘积。</p>
<p>时钟周期时间就是我们前面提及的CPU主频，主频越高说明CPU的工作速度就越快，比如电脑的CPU是2.4GHz四核Intel Core i5，这里的2.4GHz就是电脑的主频，时钟周期时间就是1/2.4G。<br>
要想CPU跑的更快自然缩短时钟周期时间，也就是提升CPU主频，但是今非昔比，摩尔定律早已失效，当今的CPU主频已经很难做到翻倍的效果了。另外，换一个更好的CPU是软件工程师无法控制的事情，我们应该把目光放到另一个乘法因子----CPU时钟周期数，如果能减少所需的CPU时钟周期数量，一样也是能提升程序的性能的。<br>
对于CPU时钟周期数我们可以进一步拆解成：（指令数x每条指令的平均时钟周期数），于是程序的CPU执行时间的公式改变：</p>
<p>所以要想程序跑的快，优化这三个因子：<br>
· 指令数，表示执行程序所需要多少条指令，以及那些指令。这个层面是基本靠编译器来优化，毕竟同样的代码，在不同的编译器，编译出来的计算机指令会有各种不同的表示方式。<br>
·每条指令的平均时钟周期数，表示一条指令需要多少个时钟周期数，现代大多数CPU通过流水线技术，让一条指令需要的CPU时钟周期数尽可能的少；<br>
·时钟周期时间，表示计算机主频，取决于计算机硬件。有的CPU支持超频技术，打开超频意味着把CPU内部的时钟给调快了，于是CPU工作速度就变快了，但是也是有代价的，CPU跑的越快，散热的压力就会越大，CPU会很容易崩溃。<br>
————————————————<br>
版权声明：本文为CSDN博主「清鸿y」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>
原文链接：https://blog.csdn.net/qq_52269550/article/details/121479724</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[如何在30分钟内，快速判断一家公司的投资价值？]]></title>
        <id>https://biggerex.github.io/post/ru-he-zai-30-fen-zhong-nei-kuai-su-pan-duan-yi-jia-gong-si-de-tou-zi-jie-zhi/</id>
        <link href="https://biggerex.github.io/post/ru-he-zai-30-fen-zhong-nei-kuai-su-pan-duan-yi-jia-gong-si-de-tou-zi-jie-zhi/">
        </link>
        <updated>2021-11-25T07:29:46.000Z</updated>
        <content type="html"><![CDATA[<p>1/5、找到值得长期研究的公司</p>
<p>对于散户而言，最好的公司不是一年内爆发性很强的公司，而是有长逻辑可以持续几年、十几年研究的长跑冠军。</p>
<p>这个观点不仅仅是出于长线投资的理念，也是因为个人投资者研究资源有限，要把学习曲线的效应发挥到极致。</p>
<p>所谓“学习曲线”，是指在学一件新东西时，一开始投入的精力非常大，产出却很小，但随着时间的推移，付出的精力越来越少，得到的收获越来越高。就像车间制造的新产品，刚开始工人需要大量培训，产能和合格率却很低，熟练后不需要培训，产能和合格率却很高。</p>
<p>研究一家新公司也是如此，一开始你的学习量非常大，要研究行业、竞争者、产品、商业模式等方方面面，技术门槛高的行业更是如此，但在投资的收益上却不大，因为对公司的价值理解有限，只能少量试探性建仓，涨了也不知道该不该追，跌了也不知道该不该补仓。</p>
<p>可只要经过了最初的学习阶段，对企业建立了全面的价值框架，后续只需要更新一些经营动态、了解最新的财务报表，学习投入大大减少；而收益呢？随着你对公司的理解加深，在高赔率或高景气度时，就敢于下重仓，收益自然更大。</p>
<p>所以，要想让学习曲线发挥最大效应，你需要找到可以长时间跟踪研究的公司。</p>
<p>所以研究一家新公司，最先看的，不是产品好不好，技术牛不牛、ROE高不高、利润增速快不快，而是该公司值不值得你花时间研究——即有没有长期投资的价值？</p>
<p>有长期价值的公司毕竟是少数，可能研究10家才能发现一家，所以你还要用尽量快的时间判断公司有没有长期研究的价值，判断公司是直接放弃，还是可以进一步研究。</p>
<p>一家公司的长期价值只取决于三个方面：行业空间、竞争格局和商业模式，你只有三十分钟，最易得到的资料是一到两份深度研究报告（新股可以看招股说明书），十分钟看行业空间，十分钟看竞争格局，十分钟看商业模式。</p>
<p>2/5、十分钟看行业空间</p>
<p>行业空间是指该行业未来的增长空间、增长的模式，以及目前所处阶段。</p>
<p>行业空间是第一要考虑的，好企业在没有成长性的行业，要付出比别人多一倍的努力，才能获得同样的业绩；在注定没落的行业，如果不想办法跳出来，无论如何努力都是悲剧英雄。</p>
<p>有一些行业目前增速很快，但未来却不大看得清，比如很多科技行业；有一些行业增速一般，但未来却相当清晰，比如很多消费品行业；有一些高速成长的行业，已到了强弩之末，有一些看似繁荣的行业，潜藏着技术变革的因子。</p>
<p>行业空间可以从三个维度来分析：所处阶段、永续性和周期性。</p>
<p>1、所处阶段：判断该行业正处于哪一个发展阶段，包括：</p>
<p>空间看似很大但非常不确定的早期，比如氢能源车、第三代半导体、OLED、量子计算机行业消费爆发、商业模式成型或者技术突破后的高速发展期，比如锂电、光伏、人工智能应用、部分医药行业、部分新消费行业稳定增长期：大部分行业都处于这个阶段发展停滞期：大部分所谓夕阳行业都处于这个阶段前景不明期：未来有可能被替代或大众变小众的行业，比如传统的新住宅开发、传统的超市百货、纸媒</p>
<p>2、周期性：从宏观经济周期、行业库存周期、朱格拉周期的角度，判断该行业是否具有明显的周期性，以及该行业处于周期四阶段“上行期、下行期、低谷期、峰顶期”中的哪一个阶段。</p>
<p>3、永续性：可以想象的未来（可以理解成15或20年后），该行业继续保持增长的概率如何。</p>
<p>比如消费电子的永续性比家电差，可选消费的永续性比必选消费差，化石能源的永续性比新能源差。白酒和调味品之所以估值高，正是因为永续性强。</p>
<p>不过，“永续性”是一个非常主观的指标，人总是高估一两年的变化，低估十年以上的变化，这一点常常要回归“第一性思考”。</p>
<p>基于“行业空间”判断有两种思路：</p>
<p>第一种是分档：A档是处于高速发展期或稳定发展期，且周期性弱，有一定永续性的行业；C是指处于不确定的早期、发展停滞期和前景不明的行业，或强周期性行业，或弱周期中的下行期；B档是A、C档之外的其他行业。</p>
<p>A、B、C档，再结合后面的两个因素，判断值不值得继续研究。</p>
<p>第二种思路是从自己的投资风格出发：</p>
<p>成长型投资者，选择处于高速发展期的行业；</p>
<p>稳健型投资者，选择处于稳定增长期且无周期性的行业；</p>
<p>周期股投资者，选择强周期且处于上行期或低谷期的行业；</p>
<p>超长线投资者，选择永续增长确定性强的行业。</p>
<p>3/5、十分钟看竞争格局</p>
<p>竞争格局主要看该企业所处行业的份额特征，该企业份额的变化趋势，及其背后的原因。即使是高增速的行业，如果竞争格局不好，企业也会出现增长乏力或ROE下降，长期增收不增利。</p>
<p>竞争格局可以从行业竞争阶段的角度分为五种：</p>
<p>1、“增速高、份额散”的阶段：</p>
<p>通常是行业发展早期和爆发期，行业空间极大，参与者众多，不断有玩家入场，比如19年的电子烟行业，20年的医美、宠物医疗。</p>
<p>这一阶段通常所有玩家都处于跑马圈地的状态，竞争看似激烈实际上属于增量竞争，一起把市场做大，可以不考虑竞争格局的问题。</p>
<p>2、行业洗牌期</p>
<p>行业份额同样很散，但增速下行，变成买方市场，企业不得不将很多资源用于“竞争型战略”，比如广告投放、降价促销、挖人、过度扩张，等等，从而降低盈利能力。</p>
<p>从2008年起，大部分行业都相继进入洗牌期，但行业洗牌期时间可长可短，总体上，进入壁垒越低、退出壁垒越高、份额领先的企业产品差异化程度越低，下游客户越强势，行业洗牌时间就越长。</p>
<p>3、行业出清期</p>
<p>洗牌期的末期，如果有公司能率先建立竞争优势，进入“正向反馈放大”状态，该行业就有可能进入“剩者为王”的行业出清期。比如18年的防水行业、19年的工程机械、去年的电动两轮车。</p>
<p>行业进入出清期的标志是，有公司率先进入“正向反馈放大”，即，一个积极因素引发一连串的积极因素，使企业在竞争中脱颖而出。</p>
<p>企业发展中常见的“正向反馈放大”有：</p>
<p>规模优势型：规模扩大——成本下降——盈利能力上升——规模再扩大（大部分重资产、成本曲线陡峭的行业的龙头）</p>
<p>研发驱动型：强研发——技术突破——盈利能力上升——研发加码投入（半导体设计行业的优势赛道龙头）</p>
<p>品牌规模型：规模扩大——品牌投放规模上升——消费者基数扩大——规模扩大（大部分的大众消费品龙头）</p>
<p>除了“正向反馈放大”之外，上市公司中常见的行业出清逻辑还有：</p>
<p>第一、国产替换</p>
<p>第二、消费升级，市场份额向头部品牌集中</p>
<p>第三、行业横向并购</p>
<p>4、份额稳定期的龙头</p>
<p>这个阶段，龙头企业发现市场份额已基本稳定，从追求份额转向追求利润，选择淘汰低毛利产品、升级新产品、控制营销费用、随着成本提价，等等。</p>
<p>此时的行业龙头体现为份额领先但增长缓慢，主营产品的营收增速高于行业增速，利润增速超过营收增速，包括一超多强的“超”和双寡头竞争格局中的“寡头”。</p>
<p>5、份额稳定期的龙二龙三</p>
<p>即一超多强格局中的“强”，这一类企业在龙头的竞争优势下能保住自己的份额，往往靠差异化竞争策略，它们的增长确定性较差，因为“差异化”也限制了企业发展的路径。</p>
<p>但其中有一类企业需要格外关注，即细分赛道隐型冠军，它们的“差异化”是子行业的特点，常常有比大行业龙头有更好的毛利水平和更陡峭的成本曲线，完全有可能依托这一易守难攻的利基市场，实现对龙头份额的弯道超越。比较典型的案例是自繁自养模式的牧原股份对农户共养模式的温氏股份的超越，湿法隔膜龙头恩捷股份对星源材质的超越。</p>
<p>行业格局的变化并不是单向的，一个已进入份额稳定期的行业，可能因为一个颠覆式创新而重新洗牌，大部分的科技行业都可能经历这种“破坏性创新”的时刻；还有部分周期性很强的赛道，每一轮周期低谷都会出现一两家逆势扩张想要重新洗牌的企业。</p>
<p>如何看待“竞争格局”呢？</p>
<p>同样，一种思路是只选择竞争格局稳定的行业，即行业出清期和份额稳定期的龙头。</p>
<p>另一种思路是根据自己的投资偏好选：</p>
<p>稳健型投资者只需要关注“份额稳定期的龙头”，特别是有护城河优势的；</p>
<p>成长股投资者，关注“行业出清期”和“细分赛道隐形冠军”；</p>
<p>自上而下的投资者也可以关注“增速高，份额散”的行业爆发期的企业；</p>
<p>喜欢困境反转、博赔率的投资者需要从“行业洗牌期”就开始跟踪，或者研究更加细分赛道上的隐形冠军的向上逆袭。</p>
<p>4/5、十分钟看商业模式</p>
<p>商业模式就是公司主要通过什么方式来赚钱，它通常代表了企业与客户、供应商和生产链其他企业的独特的合作竞争关系。</p>
<p>一个企业的商业模式通常可以归纳为一两句很简单的描述，比如：</p>
<p>茅台的商业模式核心是产品，即长期积累的奢侈品品牌价值；</p>
<p>海天味业的商业模式核心是渠道，即十几年深耕餐饮行业建立的庞大高效的营销网络；</p>
<p>京东方的商业模式核心是资源，即通过高强度的投资和技术升级建立行业进入壁垒……</p>
<p>企业的资料很琐碎，没有目标就会陷入经营数据的汪洋之中。研究的第一步，你需要找到一个抓手——如果商业模式你怎么也看不懂，直接放弃；如果商业模式你觉得有问题，直接排除；如果合适，接下来就以“商业模式”为纲，纲举目张。</p>
<p>看“商业模式”有下面三个作用：</p>
<p>第一、直接用“商业模式”排除一些不符合价值投资理念的公司</p>
<p>价值投资，买的是企业未来创造的自由现金流，而有一些企业的商业模式，产品生命周期内创造的现金流小于期间所需的投资（重资产且技术变化太快的行业的非龙头）；或者企业的投资很容易变成一堆库存或应收账款（PPP模式），这些企业都需要投资者不断地投入，一旦停止融资，企业现金流就会衰竭。</p>
<p>还有一些商业模式容易导致恶性竞争，又无法在行业出清前建立竞争壁垒（服饰和部分快消品行业）；还有一些商业模式下的产品生命周期有高度的不确定性（部分内容行业），具体可见文章《不好的商业模式，是投资中的“事故多发地段”》……</p>
<p>第二、直接用“商业模式”判断可以长期跟踪的标的</p>
<p>有一些商业模式是独一无二的，直接代表了企业的竞争优势，这一类企业，可以直接进入自选股。</p>
<p>比如分众的商业模式，用最大规模的电梯媒体网点覆盖，成为品牌接触一二线白领群体最广泛、最快速的方式。加上梯媒资源是有限的，存在谈判成本，分众的商业模式即竞争优势。</p>
<p>还有一些新经济企业，其商业模式很不常见，一旦理解，等于理解了企业价值的核心。</p>
<p>比如泡泡玛特，如果你把商业模式看成是“盲盒”这个产品，那当然没什么大的价值；但如果看到是“IP全产业链经营”，它的价值就大大不同，即便你并不确定这个商业模式能否跑通，你对企业本身的理解也走在正确的道路上。</p>
<p>再比如美团，如果你将其商业模式看成是“提供外卖、到店、酒旅等多样化本地生活服务的平台”，那现在的估值显然太高了；但如果你看到的是“支持无边界扩张的组织架构”，那显然找到了支持长期高增长的源泉。</p>
<p>当然，大部分企业的商业模式不存在好坏之分，此时，商业模式判断的第三个作用就是——</p>
<p>第三、建立下一步研究跟踪的目标</p>
<p>大部分企业的商业模式没有好坏，但有合适与否，如果一家公司在“行业空间”和“竞争格局”两项都OK，接下来就要判断其商业与经营优势是否匹配，是否有机会进入“正向反馈放大”。</p>
<p>比如，A股最多的是制造业企业，而制造业最常见的商业模式是“成本领先型”，其中可以是规模降本（隆基股份），可以是上下游一体化的降本（恒力石化），可以是工艺降本（牧原股份），可以是管理赋能型的降本（海天味业）……</p>
<p>如果你喜欢并长期投资于成本优势型的企业，第一步就要搞清楚具体是哪一种商业模式，才能对应到相关的财务指标和经营数据，才能判断所处阶段，并长期跟踪。</p>
<p>5/5、看资料要讲方法</p>
<p>文章比较长，总结一下这三个10分钟：</p>
<p>第一、从“所处阶段、周期性、永续性”判断行业空间</p>
<p>第二、从行业所处竞争阶段和企业的竞争地位判断竞争格局</p>
<p>第三、找到企业的核心商业模式，看其是否与竞争优势相匹配，是否能形成“正向反馈放大”阶段。</p>
<p>当然，30分钟只是一个目标，需要你看了足够多的企业，积累了足够的判断经验。</p>
<p>想要找到好公司，方法只有两个字“多看”——看100家公司资料，发现好公司的概率肯定高于只看10家公司；作为职业投资者，更是要看大量的公司，才能对企业“有感觉”。</p>
<p>看资料要有方法，很多投资者记得每一个财务细节，却对基本的商业模式一片茫然；对行业竞争者及份额如数家珍，但却没想过为什么能形成这样的竞争格局及未来的趋势。</p>
<p>更糟糕的是研究与投资的脱节，研究了方方面面，却只能形成一个模糊的“好公司”的印象，最后因为一个不重要的财务数据而买入，又因为一个不重要的经营动态而匆匆卖出。</p>
<p>我们是投资者，不是企业销售经理和业务主管，必须站在董事长的立场上，判断大方向和大格局，有定性的研究成果，为长期研究和跟踪做准备</p>
<p>作者：思想钢印9999<br>
链接：https://xueqiu.com/9277793488/180627251<br>
来源：雪球<br>
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。<br>
风险提示：本文所提到的观点仅代表个人的意见，所涉及标的不作推荐，据此买卖，风险自负。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[区块链完美解决“官方托”问题]]></title>
        <id>https://biggerex.github.io/post/qu-kuai-lian-wan-mei-jie-jue-guan-fang-tuo-wen-ti/</id>
        <link href="https://biggerex.github.io/post/qu-kuai-lian-wan-mei-jie-jue-guan-fang-tuo-wen-ti/">
        </link>
        <updated>2021-11-25T00:37:16.000Z</updated>
        <content type="html"><![CDATA[<p>玩家质疑腾讯端游有官方托集体删号</p>
<p>近日，因深陷官方游戏“托”风波，一批天涯明月刀千万级玩家带头直播销号，引发集体删号退游事件。对此腾讯官方否认了存在内部账号，并进行道歉和补偿，称游戏道具错误投放，但玩家对此并“不买账”。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Gridea快手🌰]]></title>
        <id>https://biggerex.github.io/post/kuai-su-shang-shou/</id>
        <link href="https://biggerex.github.io/post/kuai-su-shang-shou/">
        </link>
        <updated>2021-11-18T07:11:51.000Z</updated>
        <content type="html"><![CDATA[<p>你好，欢迎开始愉快的 Gridea 之旅呀～</p>
<h1 id="安装">安装</h1>
<p>安装 <a href='https://gridea.dev/' target='blank'>Gridea</a></p>
<h1 id="写作">写作</h1>
<p>相信你自己可以搞得定哦，加油写作啦！</p>
<h1 id="发布">发布</h1>
<p><code>Gridea 提供了将博客部署到 GitHub Pages、Coding Pages 和通过 SFTP 的方式上传到自己的服务器的功能。下面将以 GitHub 为例，来讲一下部署流程。</code></p>
<ol>
<li><strong>创建 GitHub 账号，并创建一个仓库 Token。点击GitHub，进行注册。登录 GitHub 之后，点击这里创建一个 Token，勾选上 repo 的相关权限即可。生成之后记得把 Token 复制到你的本地，因为一旦关闭网页将不能再看到它。</strong><br>
<img src="https://cdn.jsdelivr.net/gh/biggerex/bigcdn@main/blog/static/img/gridea-1.png" alt="" loading="lazy"></li>
<li><strong>创建仓库，存放构建后的网站文件。创建一个公开仓库，名为用户名.github.io。（将用户名替换为你的 GitHub 用户名）</strong><br>
<img src="https://cdn.jsdelivr.net/gh/biggerex/bigcdn@main/blog/static/img/gridea-2.png" alt="" loading="lazy"></li>
<li><strong>进入 Gridea 进行远程设置。按照下图的示例进行设置，然后点击「检测远程链接」，进行配置检查。</strong><br>
<img src="https://cdn.jsdelivr.net/gh/biggerex/bigcdn@main/blog/static/img/gridea-3.png" alt="" loading="lazy"></li>
<li><strong>同步。点击 Gridea 中的 同步按钮即可。初次部署等待几分钟之后就可以去浏览器访问了，默认地址为你在第 3 步所填写的域名。</strong><br>
<img src="https://cdn.jsdelivr.net/gh/biggerex/bigcdn@main/blog/static/img/gridea-4.png" alt="" loading="lazy"><br>
以上，就完成一个静态博客的搭建了，期待你的每一次落笔成文。</li>
</ol>
]]></content>
    </entry>
</feed>