<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://biggerex.github.io</id>
    <title>biggerex</title>
    <updated>2021-11-25T07:34:20.024Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://biggerex.github.io"/>
    <link rel="self" href="https://biggerex.github.io/atom.xml"/>
    <subtitle>币格</subtitle>
    <logo>https://biggerex.github.io/images/avatar.png</logo>
    <icon>https://biggerex.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, biggerex</rights>
    <entry>
        <title type="html"><![CDATA[要想程序跑的快，优化这三个因子]]></title>
        <id>https://biggerex.github.io/post/yao-xiang-cheng-xu-pao-de-kuai-you-hua-zhe-san-ge-yin-zi/</id>
        <link href="https://biggerex.github.io/post/yao-xiang-cheng-xu-pao-de-kuai-you-hua-zhe-san-ge-yin-zi/">
        </link>
        <updated>2021-11-25T07:31:26.000Z</updated>
        <content type="html"><![CDATA[<p>1.冯诺依曼模型<br>
内存：我们的程序和数据都是存储在内存，存储的区域是线性的。数据存储的单位是一个二进制位，即0或1。最小的存储单位是字节，1字节等于8位。内存的地址是从0开始编号的，然后自增排列，最后一个地址为内存总字节数-1，这种结构好似我们程序里的数组，所以内存的读写任何一个数据的速度都是一样的。<br>
中央处理器：也就是我们常说的CPU，32位和64位CPU最主要的区别在于一次能计算多少字节数据：32位CPU一次可以计算4个字节；64位CPU一次可以计算8个字节；这里32位和64位，通常称为CPU的位宽。之所以CPU要这样设计，是为了能计算更大的数值，如果是8位的CPU，那么一次只能计算1个字节0-255范围内的数值，这样就无法一次完成计算10000*500，于是为了能一次计算最大的运算，CPU支持多个byte一起计算，所以CPU位宽越大，可计算的数值就越大，32位CPU能计算最大整数是4294967295.<br>
CPU还有一些内部组件，常见的寄存器，控制单元和逻辑运算单元等。其中，控制单元负责控制CPU工作，逻辑运算负责计算，而寄存器可以分为多种类，每种寄存器的功能又不尽相同。CPU中的寄存器主要作用是存储计算时的数据，你可能好奇为什么有了内存还需要寄存器？原因很简单，因为内存离CPU太远了，而寄存器就在CPU里，还紧挨着控制单元和逻辑运算单元，自然计算会很快。<br>
常见起存器种类：<br>
通用寄存器，用来存放需要进行运算的数据，比如需要进行加和运算的两个数据。<br>
程序计数器，用来存储CPU要执行下一条指令【所在的内存地址】，注意不是存储了下一条要执行的指令，此时指令还在内存中，程序计数器只是存储了下一条指令的地址。<br>
指令寄存器，用来存放程序计数器指向的指令，也就是指令本身，指令被执行完成之前，指令都存储在这里。<br>
总线：总线是用于CPU和内存以及其他设备之间的通信，总线可分为3种：<br>
地址总线：用于指定CPU将要操作的内存地址；<br>
数据总线，用于读写内存的数据；<br>
控制总线：用于发送和接收信号，比如中断，设备复位等信号，CPU接收到信号后自然进行响应，这是也需要控制总线；<br>
当CPU要读写内存数据的时候，一般需要通过两个总线：<br>
首先要通过【地址总线】来指定内存的地址；<br>
再通过【数据总线】来传输数据；<br>
输入、输出设备：输入设备向计算机输入数据，计算机经过计算之后，把数据输出给输出设备。期间，如果输入设备是键盘，按下按键时是需要和CPU进行交互的，这时就需要用到控制总线了。<br>
2.线路位宽与CPU位宽<br>
数据是如何通过线路传输的呢？其实是通过操作电压，低电压表示0，高电压则表示1.如果构造了高低高这样的信号，其实就是101二进制数据，十进制则表示5，如果只有一条线路，就意味着每次只能传递1bit的数据，即0或1，那么传输101这个数据，就需要3次才能传输完成，这样的效率非常低。这样一位一位传输的方式，称为串行，下一个bit必须等待上一个bit传输完成才能进行传输。当然，想一次多传一些数据，增加线路即可，这时数据就可以并行传输。为了避免低效率的串行传输方式，线路的位宽最好一次就能访问到所有的内存地址。CPU要想操作的内存地址就需要地址总线，如果地址总线只有一条，那每次只能表示【0或1】这两种情况，所以CPU一次只能操作2个内存地址，如果想要CPU操作4G的内存，那么就需要32条地址总线，因为2^32=4G。<br>
CPU的位宽最好不要小于线路位宽，比如32位CPU控制40位宽的地址总线和数据总线的话，工作起来就会非常复杂且麻烦，所以32位的CPU最好和32位宽的线路搭配，因为32位CPU一次最多只能操作32位宽的地址总线和数据总线。<br>
如果用32位CPU去加和两个64位大小的数字，就需要把这2个64位的数字分成两个低位32位数字和2个高位32位数字来计算，先加个两个低位的32位数字，算出进位，然后加和两个高位的32位数字，最后再加上进位，就能算出结果了，可以发现32位CPU并不能一次性计算出加和两个64位数字的结果。<br>
对于64位CPU就可以一次性算出加和两个64位数字的结果，因为64位CPU可以一次读入64位的数字，并且64位CPU内部的逻辑运算单元也支持64位数字的计算。<br>
但是并不代表64位CPU性能比32位CPU高很多，很少应用需要算超过32位的数字，所以如果计算的数额不超过32位数字的情况下，32位和64位CPU之间没有什么区别的，只有当计算超过32位数字的情况下，64位的优势才能体现出来。<br>
另外，32位CPU最大只能操作4GB内存，就算你装了8GB内存条，也没用。而64位CPU寻址范围则很大，理论最大的寻址空间为2^64.<br>
3.程序执行的基本过程<br>
程序其实是一条一条的指令，所以程序的运行过程就是把每一条指令一步一步的执行起来，负责执行指令的就是CPU。<br>
CPU的执行程序的过程如下：<br>
·第一步，CPU读取程序计数器的值，这个值是指令的内存地址，然后CPU的控制单元操作地址总线指定需要访问的内存地址，接着通知内存设备准备数据，数据准备好后通过数据总线将指令传给CPU，CPU收到内存传来的数据后，将这个指令数据存入到指令寄存器。<br>
·第二步，CPU分析指令寄存器中的指令，确定指令的；类型和参数，如果是计算类型的指令，就把指令交给逻辑运算单元运算；如果是存储类型的指令，则交由控制单元执行；<br>
·第三步，CPU执行完指令后，程序计数器的值自增，表示指向下一条指令。这个自增的大小，由CPU的位宽决定，比如32位的CPU，指令是4个字节，需要4个内存地址存放，因此程序计数器的值会自增4；<br>
总结就是，一个程序执行的时候，CPU会根据程序计数器里的内存地址，从内存里面把需要的指令读取到指令寄存器里面执行，然后根据指令长度自增，开始顺序读取下一条指令。CPU从程序计数器读取指令，到执行，再到下一条指令，这个过程会不断循环，知道程序执行结束，这个不断循环的过程被称为CPU的指令周期。<br>
4.a=1+2执行具体过程<br>
CPU是不认识a=1+2这个字符串，这些字符串只是方便我们程序员认识，要想这段程序能跑起来，还需要把整个程序翻译成汇编语言的程序，这个过程称为编译成汇编代码。针对汇编代码，我们还需要用汇编语言翻译成机器码，这些机器码由0和1组成的机器语言，这一条条机器码，就是一条条的计算机指令，这个才是CPU能够真正认识的东西。<br>
程序编译过程中，编译器通过分析代码，发现1和2是数据，于是程序运行时，内存会有个专门的区域来存放这些数据，这个区域就是数据段。<br>
·数据1被存放到0x100位置；<br>
·数据2被存放到0x104位置；<br>
注意，数据和指令是分开区域存放的，存放指令区域的地方称为正文段。</p>
<p>编译器会把a=1+2翻译成4条指令，存放到正文段中。如图，这4条指令被存放到了0x200-0x20c的区域中:<br>
·0x200的内容是load指令将0x100地址中的数据1装入到寄存器R0；<br>
·0x204的内容是load指令将0x104地址中的数据2装入到寄存器R1；<br>
·0x208的内容是add指令将寄存器R0和R1的数据相加，并把结果存放到寄存器R2<br>
·0x20c的内容是store指令将寄存器R2中的数据存回数据段中的0x108地址中，这个地址也就是变量a内存中的地址；<br>
编译完成后，具体执行程序的时候，程序计数器会被设置为0x200地址，然后依次执行这4条指令。<br>
上面的例子中，由于是在32位CPU执行的，因此一条指令是占32位大小，所以你会发现每条指令间隔4个字节。而数据的大小是根据你在程序中的指定的变量类型，比如int类型的数据则占4个字节，char类型的数据则占一个字节。<br>
指令：<br>
上面的例子中，图中指令的内容我写的是简易的汇编代码，目的是为了方便理解指令的具体内容，事实上指令的内容是一串二进制数字的机器码，每条指令都有对应的机器码，CPU通过解析机器码来知道指令的内容。不同的CPU有不同的指令集，也就是对应着不同的汇编语言和不同的机器码，接下来选用最简单的MIPS指集，来看看机器码是如何生成的，这样也能明白二进制的机器码的具体含义。MIPS的指令是一个32位的整数，高6位代表着操作码，表示这条指令是一条什么样的指令，剩下的26位不同指令类型所表示的内容也就不相同，主要有三种类型R，I和J。</p>
<p>三种类型的含义：<br>
·R指令，用在算数和逻辑操作，里面由读取和写入数据的寄存器地址。如果是逻辑位移操作，后面还有位移的位移量，而最后的功能码则是在前面的操作码不够的时候，扩展操作码来表示对应的具体指令的；<br>
·I指令，用在数据传输，条件分支等。这个类型的指令，就没有了位移量和操作码，也没有了第三个寄存器，而是把这三部分直接合并成了一个地址值或一个常数；<br>
·J指令，用在跳转，高6位之外的26位都是一个跳转后的地址；<br>
接下来，我们把前面例子的这条指令：add指令寄存器R0和R1的数据相加，并把结果放入R3，翻译成机器码。</p>
<p>加和运算add指令是属于R指令类型：<br>
·add对应的MIPS指令里操作码是000000，以及最末尾的功能码是100000，这些数值都是固定的，查一下MIPS指令集的手册就能知道的；<br>
·rs代表第一个寄存器R0的编号，即00000；<br>
·rt代表第二个寄存器R1的编号，即00001；<br>
·rd代表目标的临时寄存器R2的编号，即00010；<br>
·因为不是位移操作，所以位移量是00000<br>
把上面这些数字拼在一起就是一条32位的MIPS加法指令了，那么用16进制表示机器码则是0x00011020。编译器在编译程序的时候，会构造指令，这个过程叫做指令的编码。CPU的执行程序的时候，就会解析指令，这个过程叫做指令的解码。现代多数CPU都使用来流水线的方式来执行指令，所谓的流水线就是把一个任务拆分成多个小任务，于是一条指令通常分为4个阶段，称为4级流水线：</p>
<p>四个阶段的含义：<br>
·CPU通过程序计数器读取对应的内存地址的指令，这个部分称为Fetch（取得指令）<br>
·CPU对指令进行解码，这个部分称为Decode（指令译码）<br>
·CPU执行指令，这个部分称为Execution（执行指令）<br>
·CPU将计算结果存回寄存器或者将寄存器的值存入内存，这个部分称为Store（数据回写）<br>
上面这四个阶段，我们称之为指令周期，CPU的工作就是一个周期接着一个周期，周而复始。事实上，不同的阶段是由计算机中的不同组件完成的：</p>
<p>·取指令的阶段，我们的指令是存放在存储器里的，实际上，通过程序计数器和指令寄存器取出指令的过程，是由控制器操作的；<br>
·指令的译码过程，也是由控制器进行的；<br>
·指令执行的过程，无论是进行算数操作，逻辑操作，还是进行数据传输，条件分支操作，都是由算数逻辑单元操作的，也就是由运算器处理的。但是如果是一个简单的无条件地址跳转，则是直接在控制器里面完成的，不需要用到运算器。<br>
指令的类型：<br>
·数据传输类型的指令，比如store/load是寄存器与内存之间数据传输的指令，mov是将一个内存地址的数据移动到另一个内存地址的指令；<br>
·运算类型的指令，比如加减乘除，位运算，比较大小等等，它们最多只能处理两个寄存器中的数据；<br>
·跳转类型的指令，通过修改程序计数器的值来达到跳转执行指令的过程，比如编程中常见的if-else，switch-case，函数调用等。<br>
·信号类型的指令，比如发生中断的指令trap；<br>
·闲置类型的指令，比如指令nop，执行后cpu会空转一个周期；<br>
指令的执行速度：<br>
CPU的硬件参数都会有GHz这个参数，比如1GHz的CPU，指的是时钟频率是1G，代表着1秒会产生1G次数的脉冲信号，每一次脉冲信号高低电平的转换就是一个周期，称为时钟周期。<br>
对于CPU来说，在一个时钟周期内，CPU仅能完成一个最基本的动作，时钟频率越高，时钟周期越短，工作速度也就越快。<br>
一个周期一定可以执行完一条指令嘛？大多数是不一定的，大多数指令不能再一个时钟周期完成，通常需要若干个时钟周期。不同的指令需要的时钟周期是不同的，加法和乘法都对应着一条CPU指令，但是乘法需要的时钟周期就要比加法多。<br>
5.如何让程序跑的更快？<br>
程序执行的时候，耗费的CPU时间少就说明程序是快的，对于程序的CPU执行时间，我们可以拆解成CPU时钟周期数和时钟周期时间的乘积。</p>
<p>时钟周期时间就是我们前面提及的CPU主频，主频越高说明CPU的工作速度就越快，比如电脑的CPU是2.4GHz四核Intel Core i5，这里的2.4GHz就是电脑的主频，时钟周期时间就是1/2.4G。<br>
要想CPU跑的更快自然缩短时钟周期时间，也就是提升CPU主频，但是今非昔比，摩尔定律早已失效，当今的CPU主频已经很难做到翻倍的效果了。另外，换一个更好的CPU是软件工程师无法控制的事情，我们应该把目光放到另一个乘法因子----CPU时钟周期数，如果能减少所需的CPU时钟周期数量，一样也是能提升程序的性能的。<br>
对于CPU时钟周期数我们可以进一步拆解成：（指令数x每条指令的平均时钟周期数），于是程序的CPU执行时间的公式改变：</p>
<p>所以要想程序跑的快，优化这三个因子：<br>
· 指令数，表示执行程序所需要多少条指令，以及那些指令。这个层面是基本靠编译器来优化，毕竟同样的代码，在不同的编译器，编译出来的计算机指令会有各种不同的表示方式。<br>
·每条指令的平均时钟周期数，表示一条指令需要多少个时钟周期数，现代大多数CPU通过流水线技术，让一条指令需要的CPU时钟周期数尽可能的少；<br>
·时钟周期时间，表示计算机主频，取决于计算机硬件。有的CPU支持超频技术，打开超频意味着把CPU内部的时钟给调快了，于是CPU工作速度就变快了，但是也是有代价的，CPU跑的越快，散热的压力就会越大，CPU会很容易崩溃。<br>
————————————————<br>
版权声明：本文为CSDN博主「清鸿y」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>
原文链接：https://blog.csdn.net/qq_52269550/article/details/121479724</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[如何在30分钟内，快速判断一家公司的投资价值？]]></title>
        <id>https://biggerex.github.io/post/ru-he-zai-30-fen-zhong-nei-kuai-su-pan-duan-yi-jia-gong-si-de-tou-zi-jie-zhi/</id>
        <link href="https://biggerex.github.io/post/ru-he-zai-30-fen-zhong-nei-kuai-su-pan-duan-yi-jia-gong-si-de-tou-zi-jie-zhi/">
        </link>
        <updated>2021-11-25T07:29:46.000Z</updated>
        <content type="html"><![CDATA[<p>1/5、找到值得长期研究的公司</p>
<p>对于散户而言，最好的公司不是一年内爆发性很强的公司，而是有长逻辑可以持续几年、十几年研究的长跑冠军。</p>
<p>这个观点不仅仅是出于长线投资的理念，也是因为个人投资者研究资源有限，要把学习曲线的效应发挥到极致。</p>
<p>所谓“学习曲线”，是指在学一件新东西时，一开始投入的精力非常大，产出却很小，但随着时间的推移，付出的精力越来越少，得到的收获越来越高。就像车间制造的新产品，刚开始工人需要大量培训，产能和合格率却很低，熟练后不需要培训，产能和合格率却很高。</p>
<p>研究一家新公司也是如此，一开始你的学习量非常大，要研究行业、竞争者、产品、商业模式等方方面面，技术门槛高的行业更是如此，但在投资的收益上却不大，因为对公司的价值理解有限，只能少量试探性建仓，涨了也不知道该不该追，跌了也不知道该不该补仓。</p>
<p>可只要经过了最初的学习阶段，对企业建立了全面的价值框架，后续只需要更新一些经营动态、了解最新的财务报表，学习投入大大减少；而收益呢？随着你对公司的理解加深，在高赔率或高景气度时，就敢于下重仓，收益自然更大。</p>
<p>所以，要想让学习曲线发挥最大效应，你需要找到可以长时间跟踪研究的公司。</p>
<p>所以研究一家新公司，最先看的，不是产品好不好，技术牛不牛、ROE高不高、利润增速快不快，而是该公司值不值得你花时间研究——即有没有长期投资的价值？</p>
<p>有长期价值的公司毕竟是少数，可能研究10家才能发现一家，所以你还要用尽量快的时间判断公司有没有长期研究的价值，判断公司是直接放弃，还是可以进一步研究。</p>
<p>一家公司的长期价值只取决于三个方面：行业空间、竞争格局和商业模式，你只有三十分钟，最易得到的资料是一到两份深度研究报告（新股可以看招股说明书），十分钟看行业空间，十分钟看竞争格局，十分钟看商业模式。</p>
<p>2/5、十分钟看行业空间</p>
<p>行业空间是指该行业未来的增长空间、增长的模式，以及目前所处阶段。</p>
<p>行业空间是第一要考虑的，好企业在没有成长性的行业，要付出比别人多一倍的努力，才能获得同样的业绩；在注定没落的行业，如果不想办法跳出来，无论如何努力都是悲剧英雄。</p>
<p>有一些行业目前增速很快，但未来却不大看得清，比如很多科技行业；有一些行业增速一般，但未来却相当清晰，比如很多消费品行业；有一些高速成长的行业，已到了强弩之末，有一些看似繁荣的行业，潜藏着技术变革的因子。</p>
<p>行业空间可以从三个维度来分析：所处阶段、永续性和周期性。</p>
<p>1、所处阶段：判断该行业正处于哪一个发展阶段，包括：</p>
<p>空间看似很大但非常不确定的早期，比如氢能源车、第三代半导体、OLED、量子计算机行业消费爆发、商业模式成型或者技术突破后的高速发展期，比如锂电、光伏、人工智能应用、部分医药行业、部分新消费行业稳定增长期：大部分行业都处于这个阶段发展停滞期：大部分所谓夕阳行业都处于这个阶段前景不明期：未来有可能被替代或大众变小众的行业，比如传统的新住宅开发、传统的超市百货、纸媒</p>
<p>2、周期性：从宏观经济周期、行业库存周期、朱格拉周期的角度，判断该行业是否具有明显的周期性，以及该行业处于周期四阶段“上行期、下行期、低谷期、峰顶期”中的哪一个阶段。</p>
<p>3、永续性：可以想象的未来（可以理解成15或20年后），该行业继续保持增长的概率如何。</p>
<p>比如消费电子的永续性比家电差，可选消费的永续性比必选消费差，化石能源的永续性比新能源差。白酒和调味品之所以估值高，正是因为永续性强。</p>
<p>不过，“永续性”是一个非常主观的指标，人总是高估一两年的变化，低估十年以上的变化，这一点常常要回归“第一性思考”。</p>
<p>基于“行业空间”判断有两种思路：</p>
<p>第一种是分档：A档是处于高速发展期或稳定发展期，且周期性弱，有一定永续性的行业；C是指处于不确定的早期、发展停滞期和前景不明的行业，或强周期性行业，或弱周期中的下行期；B档是A、C档之外的其他行业。</p>
<p>A、B、C档，再结合后面的两个因素，判断值不值得继续研究。</p>
<p>第二种思路是从自己的投资风格出发：</p>
<p>成长型投资者，选择处于高速发展期的行业；</p>
<p>稳健型投资者，选择处于稳定增长期且无周期性的行业；</p>
<p>周期股投资者，选择强周期且处于上行期或低谷期的行业；</p>
<p>超长线投资者，选择永续增长确定性强的行业。</p>
<p>3/5、十分钟看竞争格局</p>
<p>竞争格局主要看该企业所处行业的份额特征，该企业份额的变化趋势，及其背后的原因。即使是高增速的行业，如果竞争格局不好，企业也会出现增长乏力或ROE下降，长期增收不增利。</p>
<p>竞争格局可以从行业竞争阶段的角度分为五种：</p>
<p>1、“增速高、份额散”的阶段：</p>
<p>通常是行业发展早期和爆发期，行业空间极大，参与者众多，不断有玩家入场，比如19年的电子烟行业，20年的医美、宠物医疗。</p>
<p>这一阶段通常所有玩家都处于跑马圈地的状态，竞争看似激烈实际上属于增量竞争，一起把市场做大，可以不考虑竞争格局的问题。</p>
<p>2、行业洗牌期</p>
<p>行业份额同样很散，但增速下行，变成买方市场，企业不得不将很多资源用于“竞争型战略”，比如广告投放、降价促销、挖人、过度扩张，等等，从而降低盈利能力。</p>
<p>从2008年起，大部分行业都相继进入洗牌期，但行业洗牌期时间可长可短，总体上，进入壁垒越低、退出壁垒越高、份额领先的企业产品差异化程度越低，下游客户越强势，行业洗牌时间就越长。</p>
<p>3、行业出清期</p>
<p>洗牌期的末期，如果有公司能率先建立竞争优势，进入“正向反馈放大”状态，该行业就有可能进入“剩者为王”的行业出清期。比如18年的防水行业、19年的工程机械、去年的电动两轮车。</p>
<p>行业进入出清期的标志是，有公司率先进入“正向反馈放大”，即，一个积极因素引发一连串的积极因素，使企业在竞争中脱颖而出。</p>
<p>企业发展中常见的“正向反馈放大”有：</p>
<p>规模优势型：规模扩大——成本下降——盈利能力上升——规模再扩大（大部分重资产、成本曲线陡峭的行业的龙头）</p>
<p>研发驱动型：强研发——技术突破——盈利能力上升——研发加码投入（半导体设计行业的优势赛道龙头）</p>
<p>品牌规模型：规模扩大——品牌投放规模上升——消费者基数扩大——规模扩大（大部分的大众消费品龙头）</p>
<p>除了“正向反馈放大”之外，上市公司中常见的行业出清逻辑还有：</p>
<p>第一、国产替换</p>
<p>第二、消费升级，市场份额向头部品牌集中</p>
<p>第三、行业横向并购</p>
<p>4、份额稳定期的龙头</p>
<p>这个阶段，龙头企业发现市场份额已基本稳定，从追求份额转向追求利润，选择淘汰低毛利产品、升级新产品、控制营销费用、随着成本提价，等等。</p>
<p>此时的行业龙头体现为份额领先但增长缓慢，主营产品的营收增速高于行业增速，利润增速超过营收增速，包括一超多强的“超”和双寡头竞争格局中的“寡头”。</p>
<p>5、份额稳定期的龙二龙三</p>
<p>即一超多强格局中的“强”，这一类企业在龙头的竞争优势下能保住自己的份额，往往靠差异化竞争策略，它们的增长确定性较差，因为“差异化”也限制了企业发展的路径。</p>
<p>但其中有一类企业需要格外关注，即细分赛道隐型冠军，它们的“差异化”是子行业的特点，常常有比大行业龙头有更好的毛利水平和更陡峭的成本曲线，完全有可能依托这一易守难攻的利基市场，实现对龙头份额的弯道超越。比较典型的案例是自繁自养模式的牧原股份对农户共养模式的温氏股份的超越，湿法隔膜龙头恩捷股份对星源材质的超越。</p>
<p>行业格局的变化并不是单向的，一个已进入份额稳定期的行业，可能因为一个颠覆式创新而重新洗牌，大部分的科技行业都可能经历这种“破坏性创新”的时刻；还有部分周期性很强的赛道，每一轮周期低谷都会出现一两家逆势扩张想要重新洗牌的企业。</p>
<p>如何看待“竞争格局”呢？</p>
<p>同样，一种思路是只选择竞争格局稳定的行业，即行业出清期和份额稳定期的龙头。</p>
<p>另一种思路是根据自己的投资偏好选：</p>
<p>稳健型投资者只需要关注“份额稳定期的龙头”，特别是有护城河优势的；</p>
<p>成长股投资者，关注“行业出清期”和“细分赛道隐形冠军”；</p>
<p>自上而下的投资者也可以关注“增速高，份额散”的行业爆发期的企业；</p>
<p>喜欢困境反转、博赔率的投资者需要从“行业洗牌期”就开始跟踪，或者研究更加细分赛道上的隐形冠军的向上逆袭。</p>
<p>4/5、十分钟看商业模式</p>
<p>商业模式就是公司主要通过什么方式来赚钱，它通常代表了企业与客户、供应商和生产链其他企业的独特的合作竞争关系。</p>
<p>一个企业的商业模式通常可以归纳为一两句很简单的描述，比如：</p>
<p>茅台的商业模式核心是产品，即长期积累的奢侈品品牌价值；</p>
<p>海天味业的商业模式核心是渠道，即十几年深耕餐饮行业建立的庞大高效的营销网络；</p>
<p>京东方的商业模式核心是资源，即通过高强度的投资和技术升级建立行业进入壁垒……</p>
<p>企业的资料很琐碎，没有目标就会陷入经营数据的汪洋之中。研究的第一步，你需要找到一个抓手——如果商业模式你怎么也看不懂，直接放弃；如果商业模式你觉得有问题，直接排除；如果合适，接下来就以“商业模式”为纲，纲举目张。</p>
<p>看“商业模式”有下面三个作用：</p>
<p>第一、直接用“商业模式”排除一些不符合价值投资理念的公司</p>
<p>价值投资，买的是企业未来创造的自由现金流，而有一些企业的商业模式，产品生命周期内创造的现金流小于期间所需的投资（重资产且技术变化太快的行业的非龙头）；或者企业的投资很容易变成一堆库存或应收账款（PPP模式），这些企业都需要投资者不断地投入，一旦停止融资，企业现金流就会衰竭。</p>
<p>还有一些商业模式容易导致恶性竞争，又无法在行业出清前建立竞争壁垒（服饰和部分快消品行业）；还有一些商业模式下的产品生命周期有高度的不确定性（部分内容行业），具体可见文章《不好的商业模式，是投资中的“事故多发地段”》……</p>
<p>第二、直接用“商业模式”判断可以长期跟踪的标的</p>
<p>有一些商业模式是独一无二的，直接代表了企业的竞争优势，这一类企业，可以直接进入自选股。</p>
<p>比如分众的商业模式，用最大规模的电梯媒体网点覆盖，成为品牌接触一二线白领群体最广泛、最快速的方式。加上梯媒资源是有限的，存在谈判成本，分众的商业模式即竞争优势。</p>
<p>还有一些新经济企业，其商业模式很不常见，一旦理解，等于理解了企业价值的核心。</p>
<p>比如泡泡玛特，如果你把商业模式看成是“盲盒”这个产品，那当然没什么大的价值；但如果看到是“IP全产业链经营”，它的价值就大大不同，即便你并不确定这个商业模式能否跑通，你对企业本身的理解也走在正确的道路上。</p>
<p>再比如美团，如果你将其商业模式看成是“提供外卖、到店、酒旅等多样化本地生活服务的平台”，那现在的估值显然太高了；但如果你看到的是“支持无边界扩张的组织架构”，那显然找到了支持长期高增长的源泉。</p>
<p>当然，大部分企业的商业模式不存在好坏之分，此时，商业模式判断的第三个作用就是——</p>
<p>第三、建立下一步研究跟踪的目标</p>
<p>大部分企业的商业模式没有好坏，但有合适与否，如果一家公司在“行业空间”和“竞争格局”两项都OK，接下来就要判断其商业与经营优势是否匹配，是否有机会进入“正向反馈放大”。</p>
<p>比如，A股最多的是制造业企业，而制造业最常见的商业模式是“成本领先型”，其中可以是规模降本（隆基股份），可以是上下游一体化的降本（恒力石化），可以是工艺降本（牧原股份），可以是管理赋能型的降本（海天味业）……</p>
<p>如果你喜欢并长期投资于成本优势型的企业，第一步就要搞清楚具体是哪一种商业模式，才能对应到相关的财务指标和经营数据，才能判断所处阶段，并长期跟踪。</p>
<p>5/5、看资料要讲方法</p>
<p>文章比较长，总结一下这三个10分钟：</p>
<p>第一、从“所处阶段、周期性、永续性”判断行业空间</p>
<p>第二、从行业所处竞争阶段和企业的竞争地位判断竞争格局</p>
<p>第三、找到企业的核心商业模式，看其是否与竞争优势相匹配，是否能形成“正向反馈放大”阶段。</p>
<p>当然，30分钟只是一个目标，需要你看了足够多的企业，积累了足够的判断经验。</p>
<p>想要找到好公司，方法只有两个字“多看”——看100家公司资料，发现好公司的概率肯定高于只看10家公司；作为职业投资者，更是要看大量的公司，才能对企业“有感觉”。</p>
<p>看资料要有方法，很多投资者记得每一个财务细节，却对基本的商业模式一片茫然；对行业竞争者及份额如数家珍，但却没想过为什么能形成这样的竞争格局及未来的趋势。</p>
<p>更糟糕的是研究与投资的脱节，研究了方方面面，却只能形成一个模糊的“好公司”的印象，最后因为一个不重要的财务数据而买入，又因为一个不重要的经营动态而匆匆卖出。</p>
<p>我们是投资者，不是企业销售经理和业务主管，必须站在董事长的立场上，判断大方向和大格局，有定性的研究成果，为长期研究和跟踪做准备</p>
<p>作者：思想钢印9999<br>
链接：https://xueqiu.com/9277793488/180627251<br>
来源：雪球<br>
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。<br>
风险提示：本文所提到的观点仅代表个人的意见，所涉及标的不作推荐，据此买卖，风险自负。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[区块链完美解决“官方托”问题]]></title>
        <id>https://biggerex.github.io/post/qu-kuai-lian-wan-mei-jie-jue-guan-fang-tuo-wen-ti/</id>
        <link href="https://biggerex.github.io/post/qu-kuai-lian-wan-mei-jie-jue-guan-fang-tuo-wen-ti/">
        </link>
        <updated>2021-11-25T00:37:16.000Z</updated>
        <content type="html"><![CDATA[<p>玩家质疑腾讯端游有官方托集体删号</p>
<p>近日，因深陷官方游戏“托”风波，一批天涯明月刀千万级玩家带头直播销号，引发集体删号退游事件。对此腾讯官方否认了存在内部账号，并进行道歉和补偿，称游戏道具错误投放，但玩家对此并“不买账”。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Gridea快手🌰]]></title>
        <id>https://biggerex.github.io/post/kuai-su-shang-shou/</id>
        <link href="https://biggerex.github.io/post/kuai-su-shang-shou/">
        </link>
        <updated>2021-11-18T07:11:51.000Z</updated>
        <content type="html"><![CDATA[<p>你好，欢迎开始愉快的 Gridea 之旅呀～</p>
<h1 id="安装">安装</h1>
<p>安装 <a href='https://gridea.dev/' target='blank'>Gridea</a></p>
<h1 id="写作">写作</h1>
<p>相信你自己可以搞得定哦，加油写作啦！</p>
<h1 id="发布">发布</h1>
<p><code>Gridea 提供了将博客部署到 GitHub Pages、Coding Pages 和通过 SFTP 的方式上传到自己的服务器的功能。下面将以 GitHub 为例，来讲一下部署流程。</code></p>
<ol>
<li><strong>创建 GitHub 账号，并创建一个仓库 Token。点击GitHub，进行注册。登录 GitHub 之后，点击这里创建一个 Token，勾选上 repo 的相关权限即可。生成之后记得把 Token 复制到你的本地，因为一旦关闭网页将不能再看到它。</strong><br>
<img src="https://cdn.jsdelivr.net/gh/biggerex/bigcdn@main/blog/static/img/gridea-1.png" alt="" loading="lazy"></li>
<li><strong>创建仓库，存放构建后的网站文件。创建一个公开仓库，名为用户名.github.io。（将用户名替换为你的 GitHub 用户名）</strong><br>
<img src="https://cdn.jsdelivr.net/gh/biggerex/bigcdn@main/blog/static/img/gridea-2.png" alt="" loading="lazy"></li>
<li><strong>进入 Gridea 进行远程设置。按照下图的示例进行设置，然后点击「检测远程链接」，进行配置检查。</strong><br>
<img src="https://cdn.jsdelivr.net/gh/biggerex/bigcdn@main/blog/static/img/gridea-3.png" alt="" loading="lazy"></li>
<li><strong>同步。点击 Gridea 中的 同步按钮即可。初次部署等待几分钟之后就可以去浏览器访问了，默认地址为你在第 3 步所填写的域名。</strong><br>
<img src="https://cdn.jsdelivr.net/gh/biggerex/bigcdn@main/blog/static/img/gridea-4.png" alt="" loading="lazy"><br>
以上，就完成一个静态博客的搭建了，期待你的每一次落笔成文。</li>
</ol>
]]></content>
    </entry>
</feed>